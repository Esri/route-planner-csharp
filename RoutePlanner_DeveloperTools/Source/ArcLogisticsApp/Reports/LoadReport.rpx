<?xml version="1.0" encoding="UTF-8"?>
<ActiveReportsLayout Version="3.1" PrintWidth="10396.8" MaxPages="200" DocumentName="ARNet Document" ScriptLang="C#" MasterReport="0">
  <StyleSheet>
    <Style Name="Normal" Value="font-family: Arial; font-style: normal; text-decoration: none; font-weight: normal; font-size: 10pt; color: Black; ddo-char-set: 204; " />
    <Style Name="Heading1" Value="font-size: 16pt; font-weight: bold; ddo-char-set: 204; " />
    <Style Name="Heading2" Value="font-family: Times New Roman; font-size: 14pt; font-weight: bold; font-style: italic; ddo-char-set: 204; " />
    <Style Name="Heading3" Value="font-size: 13pt; font-weight: bold; ddo-char-set: 204; " />
  </StyleSheet>
  <Sections>
    <Section Type="PageHeader" Name="PageHeader" Height="1485" BackColor="16777215" CanGrow="0">
      <Control Type="AR.Label" Name="lblTitle" Left="0" Top="0" Width="2880" Height="540" Caption="Load Report" Style="ddo-char-set: 204; color: Teal; text-decoration: none; text-align: center; font-weight: bold; font-style: italic; font-size: 20.25pt; " />
      <Control Type="AR.Line" Name="lineNameDecorator" X1="180" Y1="540" X2="2700" Y2="540" LineColor="8421376" LineWeight="2" />
      <Control Type="AR.Label" Name="labelPrintDate" Left="7290" Top="720" Width="1260" Height="270" Caption="Print Date" Style="ddo-char-set: 204; text-align: right; background-color: Transparent; font-size: 9pt; white-space: nowrap; " />
      <Control Type="AR.Label" Name="lblComment1" Left="5850" Top="720" Width="1440" Height="270" Caption="Print Date/Time:" Style="ddo-char-set: 204; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Label" Name="labelPrintTime" Left="8550" Top="720" Width="990" Height="270" Caption="Print Time" Style="ddo-char-set: 204; text-align: right; background-color: Transparent; font-size: 9pt; white-space: nowrap; " />
      <Control Type="AR.Field" Name="lblScheduleDescription" DataField="=PlannedDate.ToShortDateString();" Left="6840" Top="1080" Width="990" Height="270" Text="PlannedDate" OutputFormat="" CanGrow="0" Style="color: Black; ddo-char-set: 204; text-align: left; font-weight: bold; background-color: Transparent; font-size: 9pt; white-space: nowrap; " />
      <Control Type="AR.Label" Name="lblSchedule" Left="5850" Top="1080" Width="990" Height="270" Caption="Schedule:" Style="color: Black; ddo-char-set: 204; font-weight: bold; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Field" Name="textBoxVehicleName" DataField="VehicleName" Left="810" Top="720" Width="4950" Height="270" Text="VehicleName" Style="ddo-char-set: 1; font-weight: bold; font-size: 9pt; " />
      <Control Type="AR.Label" Name="lblVehicle" Left="0" Top="720" Width="810" Height="270" Caption="Vehicle:" Style="color: Black; ddo-char-set: 204; font-weight: bold; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Label" Name="lblDriver" Left="0" Top="1080" Width="810" Height="270" Caption="Driver:" Style="color: Black; ddo-char-set: 204; font-weight: bold; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Field" Name="textBoxDriverName" DataField="DriverName" Left="810" Top="1080" Width="4950" Height="270" Text="DriverName" Style="ddo-char-set: 1; font-weight: bold; font-size: 9pt; " />
    </Section>
    <Section Type="GroupHeader" Name="groupHeader" Height="74" DataField="Route.ID" BackColor="16777215" KeepTogether="1" CanShrink="1" />
    <Section Type="Detail" Name="Detail" Height="794" BackColor="16777215" KeepTogether="1" CanShrink="1">
      <Control Type="AR.Label" Name="lblOrderLoadSequence" DataField="= (-1 == OrderSequence)? null : OrderSequence" Left="0" Top="90" Width="360" Height="270" Caption="LoadSequence" Style="color: Black; ddo-char-set: 204; font-weight: bold; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Line" Name="line1" X1="0" Y1="0" X2="10530" Y2="0" LineColor="8421376" LineWeight="2" />
      <Control Type="AR.Label" Name="lblStopName" DataField="= &quot;:  &quot;+Stop.Name" Left="450" Top="90" Width="5310" Height="270" Caption="StopName" Style="color: Black; ddo-char-set: 204; font-weight: normal; font-style: normal; font-size: 9pt; white-space: inherit; " />
      <Control Type="AR.Field" Name="textBoxContent" Visible="0" Left="450" Top="450" Width="9878.4" Height="270.72" Text="Content Control Prototype" OutputFormat="0" Style="ddo-char-set: 204; text-align: left; font-size: 9pt; white-space: inherit; " />
    </Section>
    <Section Type="GroupFooter" Name="groupFooter" Height="540" BackColor="16777215" NewPage="2" CanShrink="1">
      <Control Type="AR.Label" Name="lblTotalOrdersValue" DataField="TotalOrders" Left="2160" Top="180" Width="720" Height="270" Caption="Orders" Style="color: Black; ddo-char-set: 1; text-align: left; font-weight: normal; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Line" Name="lineVerticalSeparator1" X1="0" Y1="90" X2="10530" Y2="90" LineColor="8421376" LineWeight="3" />
      <Control Type="AR.Label" Name="lblTotalOrders" Left="990" Top="180" Width="1080" Height="270" Caption="Orders" Style="color: Black; ddo-char-set: 204; text-align: right; font-weight: bold; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Label" Name="lblTotal" Left="0" Top="180" Width="900" Height="270" Caption="Total" Style="color: Teal; ddo-char-set: 204; font-style: normal; font-size: 9pt; " />
      <Control Type="AR.Field" Name="textBoxContentTotal" Visible="0" Left="2970" Top="180" Width="7358.4" Height="270.72" Text="Content Control Prototype" Style="ddo-char-set: 204; text-align: left; font-size: 9pt; white-space: inherit; " />
    </Section>
    <Section Type="PageFooter" Name="PageFooter" Height="330" BackColor="16777215" CanGrow="0">
      <Control Type="AR.ReportInfo" Name="reportInfo" Left="0" Top="0" Width="10339.2" Height="270.72" FormatString="{PageNumber} of {PageCount}" Style="text-align: center; " SummaryGroup="groupHeader" />
    </Section>
  </Sections>
  <ReportComponentTray />
  <DataSources>
    <OleDbDataSource ConnectE="13IdEUWXLb8jDY6d7T6jJYmDRKY5Eee4itGMLIPDLT+VBQkrRemRcHciYcI1dvBprE9fQStE8tu+isu2CxpLq60nUFW0DfO+2JqbUlMrmZBzNYCg0lK/2VTwRb+N2Jid385Ewa4c8Mt+7KgVjOhLTA==" SQL="SELECT * FROM (`Route` `Route` INNER JOIN `Stop` `Stop` ON (`Route`.`ScheduleID`=`Stop`.`ScheduleID`) AND (`Route`.`ID`=`Stop`.`RouteID`)) INNER JOIN `Schedule` `Schedule` ON `Route`.`ScheduleID`=`Schedule`.`ID` ORDER BY `Route`.`Name`, `Stop`.`Sequence` DESC" />
  </DataSources>
  <Script><![CDATA[using System.Data;
using System.Data.OleDb;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;

        private const float SPACE_SEPARATOR_Y = 0.0625f;
        private const float SPACE_SEPARATOR_WIDTH_PAIR = 0.125f;
        private const string SELECT_STRING_SCHEMA = "SELECT * FROM `Schema`";
        private const string DYNAMIC_LABEL_NAME_FORAMT = "lblDynamicRPT{0}";
        private const string TOTAL_FIELD_FORMAT = "Total{0}";
        private const string DYNAMIC_VALUES_FORMAT = "{0}: {1}";
        private const string LOCATION_NAME_LABEL_FORMAT = "{0}{1}{2}";
        private const string STOP_NAME_LABEL_FORMAT = "{0}: {1}";
        private const int BIG_VALUE_SIZE = 25; // in chars
        private const string DOUBLE_DATA_FORMAT = "#,##0.00";
        private const string NORMAL_STYLE = "color: Black; ddo-char-set: 204; font-weight: normal; font-style: normal; font-size: 9pt; white-space: nowrap;";
        private const string BOLD_STYLE = "text-decoration: underline; color: Black; ddo-char-set: 204; font-weight: bold; f" +
                "ont-style: normal; font-size: 9pt; white-space: nowrap;";
        private const string STOP_TABLE_NAME_FORMAT = "Stop.{0}";

        private sealed class LayoutHelper
        {
            private static int _insertedNum = 0;
            public static void AddControls(ICollection<string> values, ARControl control,
                                           ControlCollection controls)
            {
                RectangleF fullRect = control.Bounds;

                if (null != controls)
                    controls.Remove(control); // remove prototype

                int insertIndex = 0;
                for (int i = 0; i < values.Count; ++i)
                {
                    if (null != controls)
                    {
                        ARControl newLabel = _CreateLabel(control, fullRect, _insertedNum.ToString());
                        controls.Insert(insertIndex, newLabel);
                        ++insertIndex;
                        ++_insertedNum;
                    }
                }
            }

            public static SizeF RepositionControls(ICollection<string> values,
                                                   ICollection<string> longValues,
                                                   int dynamicFieldCount,
                                                   RectangleF contentRect,
                                                   ControlCollection controls,
                                                   bool isUseFullSize)
            {
                Debug.Assert(values.Count + longValues.Count <= dynamicFieldCount);

                int controlsPerLine = isUseFullSize? _CalcControlPerLineFull(values.Count) :
                                                     _CalcControlPerLine(values.Count);

                // calculate dimensions
                float controlWidth = (float)(contentRect.Width - SPACE_SEPARATOR_WIDTH_PAIR * (controlsPerLine - 1)) / controlsPerLine; // NOTE: SPACE_SEPARATOR_WIDTH_PAIR spasing between pair of controls
                PointF locationStart = new PointF(contentRect.Left, contentRect.Top);
                SizeF size = new SizeF(controlWidth, contentRect.Height);
                PointF location = new PointF(locationStart.X, locationStart.Y);
                float offsetY = contentRect.Height + SPACE_SEPARATOR_Y;
                float offsetX = SPACE_SEPARATOR_WIDTH_PAIR + controlWidth;

                int index = 0;
                // add all short fields - controls per line
                foreach (string value in values)
                {
                    if ((0 != index) && (index % controlsPerLine) == 0)
                        location.Y += offsetY;
                    location.X = (0 == (index % controlsPerLine)) ? locationStart.X : location.X + offsetX;

                    RectangleF rect = new RectangleF(location, size);
                    Label label = (Label)controls[index];
                    label.Bounds = rect;
                    label.Visible = true;
                    label.Text = value;

                    ++index;
                }

                // add all long fields - one per line
                if (0 < longValues.Count)
                {
                    bool isFirst = true;
                    location.X = contentRect.Left;
                    size = new SizeF(contentRect.Width, contentRect.Height);
                    foreach (string value in longValues)
                    {
                        // add offset every time after first and after short fields if its present
                        if (!isFirst || (isFirst && (0 < values.Count)))
                            location.Y += offsetY;

                        RectangleF rect = new RectangleF(location, size);
                        Label label = (Label)controls[index];
                        label.Bounds = rect;
                        label.Visible = true;
                        label.Text = value;

                        isFirst = false;
                        ++index;
                    }
                }

                // hide dont used controls
                for (int i = index; i < dynamicFieldCount; ++i)
                    controls[i].Visible = false;

                // calculate full space size
                return new SizeF(contentRect.Width, location.Y + contentRect.Height - locationStart.Y);
            }

            private static ARControl _CreateLabel(ARControl prototypeControl,
                                                  RectangleF rectControl, string name)
            {
                TextBox prototypeCtrl = (DataDynamics.ActiveReports.TextBox)prototypeControl;
                Label lb = new Label();
                lb.Name = string.Format(DYNAMIC_LABEL_NAME_FORAMT, name);
                lb.Bounds = rectControl;
                lb.ForeColor = prototypeCtrl.ForeColor;
                lb.BackColor = prototypeCtrl.BackColor;
                lb.Alignment = prototypeCtrl.Alignment;
                lb.Visible = prototypeCtrl.Visible;
                lb.Style = prototypeCtrl.Style;
                lb.Font = prototypeCtrl.Font;
                return lb;
            }

            private static int _CalcControlPerLineFull(int totalControls)
            {
                return (totalControls < 5) ? totalControls : ((7 == totalControls) || (8 == totalControls) || (9 < totalControls)) ? 4 : 3;
            }

            private static int _CalcControlPerLine(int totalControls)
            {
                return (totalControls < 4) ? totalControls : (4 == totalControls) ? 2 : 3;
            }
        }

        private sealed class WorkHelper
        {
            public static string FormatValue(string value)
            {
                string formattedValue = value;
                if (_IsValueDouble(value))
                {   // format float and double values
                    double numericValue = 0.0;
                    if (Double.TryParse(value, out numericValue))
                        formattedValue = numericValue.ToString(DOUBLE_DATA_FORMAT);
                }

                return formattedValue;
            }

            public static string FiltrateReadedValue(object value)
            {
                string result = null;
                if (null != value)
                {
                    string tmp = value.ToString().Trim();
                    if (!string.IsNullOrEmpty(tmp))
                    {
                        if (!_IsIgnoredValue(tmp))
                            result = tmp;
                    }
                }

                return result;
            }

            private static bool _IsIgnoredValue(string value)
            {
                Debug.Assert(!string.IsNullOrEmpty(value));

                bool result = false;

                value = value.ToLower();
                foreach (string ignored in IGNORED_VALUES)
                {
                    if (value == ignored)
                    {
                        result = true;
                        break; // result founded
                    }
                }

                return result;
            }
            
            private static bool _IsValueDouble(string value)
            {
                return (value.Contains(".") || value.Contains(","));
            }

            private static string[] IGNORED_VALUES = { "empty", "n\a", "n/a", "0", "0.0", "0,0" };
        }

        ///////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////////////////

        private bool _isInitialized = false;
        private RectangleF _contentRect;
        private RectangleF _contentRectTotal;
        private List<string> _fieldNameArray = new List<string>();
        private List<string> _totalNameArray = new List<string>();
        private List<string> _footerValues = new List<string>();

public void ActiveReport_ReportStart()
{
            if (_isInitialized)
                return; // only once
                
            ControlCollection pageHeaderControls = rpt.Sections["PageHeader"].Controls;
            ((Label)pageHeaderControls["labelPrintDate"]).Text = DateTime.Now.ToShortDateString();
            ((Label)pageHeaderControls["labelPrintTime"]).Text = DateTime.Now.ToLongTimeString();
            
            // read dynamicals fields
            DataSources.OleDBDataSource ds = (DataSources.OleDBDataSource)rpt.DataSource;
            using (OleDbConnection cnn = new OleDbConnection(ds.ConnectionString))
            {
                if (cnn.State == ConnectionState.Closed)
                    cnn.Open();

                char[] splitters = new char[] { ',' };

                OleDbCommand cmd = new OleDbCommand(SELECT_STRING_SCHEMA, cnn);
                using (OleDbDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        string type = reader["Type"].ToString();

                        // get fields list
                        string names = reader["FieldNames"].ToString();
                        string[] nameArray = names.Split(splitters);
                        Debug.Assert(0 < nameArray.Length);

                        for (int index = 0; index < nameArray.Length; ++index)
                        {
                            _fieldNameArray.Add(nameArray[index]);

                            if (type == "Capacities")
                                _totalNameArray.Add(string.Format(TOTAL_FIELD_FORMAT, nameArray[index]));
                        }
                    }
                }
            }

            // add dynamic controls
            ControlCollection detailControls = rpt.Sections["Detail"].Controls;
            ARControl ctrlContent = detailControls["textBoxContent"];
            _contentRect = ctrlContent.Bounds; // store boundbox - for space calculation
            LayoutHelper.AddControls(_fieldNameArray.AsReadOnly(), ctrlContent, detailControls);

            ControlCollection footerControls = rpt.Sections["groupFooter"].Controls;
            ARControl ctrlContentTotal = footerControls["textBoxContentTotal"];
            _contentRectTotal = ctrlContentTotal.Bounds; // store boundbox - for space calculation
            LayoutHelper.AddControls(_totalNameArray.AsReadOnly(), ctrlContentTotal, footerControls);

            _isInitialized = true;
}

public void Detail_Format()
{
            FieldCollection fields = rpt.Fields;

            string stopType = fields["StopTypeExString"].Value.ToString();
            bool isOrder = stopType.Equals("Stop", StringComparison.OrdinalIgnoreCase);
            bool isStartLocation = stopType.Equals("StartLocation", StringComparison.OrdinalIgnoreCase);
            bool isLunch = stopType.Equals("Lunch", StringComparison.OrdinalIgnoreCase);

            bool isVisible = !isLunch;
            
            Section detailSection = rpt.Sections["Detail"];
            detailSection.Visible = isVisible;
            if (isVisible)
            {
                ControlCollection controls = detailSection.Controls;

                Label labelStopName = controls["lblStopName"] as Label;

                List<string> values = new List<string>();
                List<string> longValues = new List<string>();
                if (isOrder)
                {
                    labelStopName.Text = string.Format(STOP_NAME_LABEL_FORMAT, fields["OrderTypeString"].Value,
                                                                   fields["Stop.Name"].Value);
                    labelStopName.Style = NORMAL_STYLE;

                    // read values
                    foreach (string fieldName in _fieldNameArray)
                    {
                         string realName = fieldName;
                         if (fields[realName] == null)
                         {
                             string stopFieldName = string.Format(STOP_TABLE_NAME_FORMAT, realName);
                             if (fields[stopFieldName] != null)
                                  realName = stopFieldName;
                         }
                
                        if (null == fields[realName])
                            continue; // NOTE: skip
                        
                        string value = WorkHelper.FiltrateReadedValue(fields[realName].Value);
                        if (null != value)
                        {
                            value = WorkHelper.FormatValue(value);
                            string textValue = string.Format(DYNAMIC_VALUES_FORMAT, fieldName, value);
                            if (textValue.Length < BIG_VALUE_SIZE)
                                values.Add(textValue);
                            else
                                longValues.Add(textValue);
                        }
                    }
                }
                else
                {
                    labelStopName.Text = string.Format(LOCATION_NAME_LABEL_FORMAT, fields["StopNamePrefix"].Value,
                                                                    fields["Stop.Name"].Value,
                                                                    fields["StopNamePostfix"].Value);
                    labelStopName.Style = BOLD_STYLE;
                }

                SizeF size = LayoutHelper.RepositionControls(values.AsReadOnly(),
                                                             longValues.AsReadOnly(),
                                                             _fieldNameArray.Count,
                                                             _contentRect, controls,
                                                             true);
                // resize parent section
                float newHeight = _contentRect.Top + size.Height + SPACE_SEPARATOR_Y;
                if (detailSection.Height < newHeight)
                    detailSection.Height = newHeight;

                if (isStartLocation)
                {
                    // read values
                    _footerValues.Clear();
                    foreach (string fieldName in _totalNameArray)
                    {
                        string value = WorkHelper.FiltrateReadedValue(fields[fieldName].Value);
                        if (null != value)
                        {
                            value = WorkHelper.FormatValue(value);
                            string textValue = string.Format(DYNAMIC_VALUES_FORMAT, fieldName, value);
                            _footerValues.Add(textValue);
                        }
                    }
                }
            }
}

public void groupFooter_Format()
{
            Section footerSection = rpt.Sections["groupFooter"];
            ControlCollection footerControls = footerSection.Controls;

            SizeF size = LayoutHelper.RepositionControls(_footerValues.AsReadOnly(),
                                                         new List<string>().AsReadOnly(),
                                                         _totalNameArray.Count,
                                                         _contentRectTotal, footerControls,
                                                         false);
            // resize parent section
            float newHeight = _contentRectTotal.Top + size.Height + SPACE_SEPARATOR_Y;
            if (footerSection.Height < newHeight)
                footerSection.Height = newHeight;
}]]></Script>
  <PageSettings LeftMargin="720" RightMargin="720" TopMargin="720" BottomMargin="720" Orientation="1" />
  <Parameters />
</ActiveReportsLayout>