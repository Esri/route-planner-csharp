<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2009 Xceed Software Inc.

  [Common.Resources.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:systemControls="clr-namespace:System.Windows.Controls.Primitives;assembly=PresentationFramework"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid;assembly=Xceed.Wpf.DataGrid"
                    xmlns:cnv="clr-namespace:Xceed.Wpf.DataGrid.Converters;assembly=Xceed.Wpf.DataGrid"
                    xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase">

   <!-- Style applied to the Thumbs that are used to resize the columns and rows.
        The Thumb's template is an empty Grid with a Transparent background to
        make it hit-testable. -->
    <Style x:Key="invisibleThumbStyle"
          TargetType="Thumb">

        <Setter Property="MinWidth"
              Value="{StaticResource {x:Static SystemParameters.ResizeFrameVerticalBorderWidthKey}}" />

        <Setter Property="MinHeight"
              Value="{StaticResource {x:Static SystemParameters.ResizeFrameHorizontalBorderHeightKey}}" />

        <Setter Property="Template">
            <Setter.Value>

                <ControlTemplate TargetType="Thumb">
                    <Grid Background="Transparent" />
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!-- ControlTemplated applied to the Button that is used in the DataRows
        to expand/collapse Details. -->
    <ControlTemplate x:Key="detailsExpanderButtonTemplate"
                    TargetType="Button">
        <ContentPresenter x:Name="expanderGlyphPresenter"
                        Content="{x:Null}"
                        ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CollapseGroupGlyph}" />

        <ControlTemplate.Triggers>
            <Trigger Property="local:DataGridControl.HasExpandedDetails"
                  Value="False">
                <Setter TargetName="expanderGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ExpandGroupGlyph}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ControlTemplated applied to the ToggleButton that is used in the GroupHeaders
        to expand/collapse groups. -->
    <ControlTemplate x:Key="groupExpanderToggleButtonTemplate"
                    TargetType="ToggleButton">

        <ContentPresenter x:Name="expanderGlyphPresenter"
                        Content="{x:Null}"
                        ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).CollapseGroupGlyph}" />

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked"
                  Value="False">
                <Setter TargetName="expanderGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ExpandGroupGlyph}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Default DataTemplate for displaying a Group (e.g. in a GroupHeader) -->
    <DataTemplate DataType="{x:Type local:Group}">

        <StackPanel Orientation="Horizontal">

            <ContentPresenter Content="{Binding Title}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.TitleTemplate}"
                           ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.TitleTemplateSelector}" />

            <TextBlock Text=": " />
            <ContentPresenter Content="{Binding Value}"
                           ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.ValueTemplate}"
                           ContentTemplateSelector="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.ValueTemplateSelector}" />

            <TextBlock Text=" (" />
            <TextBlock Text="{Binding ItemCount}" />
            <TextBlock Text=" " />
            <TextBlock x:Name="suffixRun"
                    Text="items" />
            <TextBlock Text=")" />

        </StackPanel>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ItemCount}"
                      Value="1">
                <Setter TargetName="suffixRun"
                    Property="Text"
                    Value="item" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- Default DataTemplate for displaying a GroupLevelDescription (e.g. in a GroupByItem) -->
    <DataTemplate DataType="{x:Type local:GroupLevelDescription}">

        <ContentPresenter Content="{Binding Title}"
                        ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.TitleTemplate}" />

    </DataTemplate>

    <!-- ValueConverter that is used to do DataTriggers on Content properties to check if they are null. -->
    <cnv:NullToBooleanConverter x:Key="nullToBooleanConverter" />

    <!-- ValueConverter that is used to do change the opacity of GroupHeaderControls in CardView. -->
    <cnv:LevelToOpacityConverter x:Key="levelToOpacityConverter" />

    <cnv:IntAdditionConverter x:Key="intAdditionConverter" />

    <!-- ValueConverter that is used to map GridLineThickness properties (of type double)
        to Thickness structures that we can set to BorderThickness properties in the templates. -->
    <cnv:ThicknessConverter x:Key="thicknessConverter" />

    <Thickness x:Key="cellPadding"
              Left="2"
              Top="2"
              Right="2"
              Bottom="2" />

    <!-- ContextMenu used to choose the columns in a ColumnManagerRow -->
    <local:ColumnChooserContextMenu x:Key="columnManagerRowContextMenu">
        <local:ColumnChooserContextMenu.Resources>
            <local:DataGridCollectionViewSource x:Key="source"
                                             Source="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}, Path=(local:DataGridControl.DataGridContext).ColumnChooserColumns}" />
        </local:ColumnChooserContextMenu.Resources>

        <local:ColumnChooserContextMenu.ItemsSource>
            <Binding Source="{StaticResource source}" />
        </local:ColumnChooserContextMenu.ItemsSource>
    </local:ColumnChooserContextMenu>

    <!--**************************
   * Style: ListBoxItem Style (AutoFilter Options)
   **************************-->

    <Style x:Key="defaultAutoFilteringCheckBoxItemStyle"
          TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <Border Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}">

                        <CheckBox Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            Focusable="False"
                            IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsSelected, Mode=TwoWay}"
                            Margin="2,2,2,2" />
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <DataTemplate x:Key="autoFilterGlyph">
        <Grid Width="11"
            Height="9">
            <Path Stretch="Fill"
               Data="M64.133,235.13263 L64.350203,238.7367 65.855009,238.74891 66.100509,235.16181 69.042509,232.28811 69.050509,231.03788 61.5,231.125 61.474998,232.25889 z"
               HorizontalAlignment="Left"
               Width="9.758">
                <Path.Fill>
                    <LinearGradientBrush EndPoint="0.82,0.697"
                                    StartPoint="0.119,0.167">
                        <GradientStop Color="#FFFFFFFF"
                                Offset="0" />
                        <GradientStop Color="#FF505050"
                                Offset="1" />
                    </LinearGradientBrush>
                </Path.Fill>
                <Path.Stroke>
                    <LinearGradientBrush EndPoint="1,0.5"
                                    StartPoint="0,0.5">
                        <GradientStop Color="#FF272727"
                                Offset="1" />
                        <GradientStop Color="#FF8B8B8B"
                                Offset="0" />
                    </LinearGradientBrush>
                </Path.Stroke>
            </Path>
            <Path HorizontalAlignment="Right"
               Margin="0,0,-0.125,0"
               VerticalAlignment="Bottom"
               Width="3.875"
               Height="2.375"
               Fill="#FF000000"
               Stretch="Fill"
               Stroke="{x:Null}"
               Data="M33.25,228.40948 L36.35,228.40948 34.725,230.12931 z" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="autoFilterDropDownGlyph">
        <Canvas Width="7.69"
              Height="3.9729">

            <Path Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource Self}}"
               Stretch="Fill"
               Data="M312.81432,221.49666 L319.57009,221.49336 316.21963,224.62833 z"
               Width="7.69"
               Height="3.97299999999998" />

        </Canvas>
    </DataTemplate>
    
</ResourceDictionary>
