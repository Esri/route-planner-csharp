<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2009 Xceed Software Inc.

  [TableView.GridElementTemplates.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Xceed.Wpf.DataGrid;assembly=Xceed.Wpf.DataGrid"
                    xmlns:markup="clr-namespace:Xceed.Utils.Wpf.Markup;assembly=Xceed.Wpf.DataGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters;assembly=Xceed.Wpf.DataGrid"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views;assembly=Xceed.Wpf.DataGrid">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Common.Resources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="tableViewRowFocusVisualStyle"
          TargetType="IFrameworkInputElement">
        <Style.Resources>
            <conv:ThicknessConverter x:Key="thicknessConverter" />
        </Style.Resources>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Stroke="#FF000000"
                          StrokeThickness="1"
                          StrokeDashArray="1 2"
                          Margin="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScrollViewer}}, Path=HorizontalOffset, Converter={StaticResource thicknessConverter}, ConverterParameter='Left'}"
                          SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--**************************
    * TEMPLATE: DataGridControl's ItemsPanelTemplate
    ************************** -->
    <ItemsPanelTemplate x:Key="tableViewDataGridControlItemsPanelTemplate">

        <local:VirtualizingStackPanel Orientation="Vertical" />

    </ItemsPanelTemplate>

    <!--**************************
    * TEMPLATE: DataGridControl 
    ************************** -->

    <ControlTemplate x:Key="tableViewDataGridControlTemplate"
                    TargetType="local:DataGridControl">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

            <!-- The AdornerDecorator will allow visual cues for Drag & Drop operations. -->
            <AdornerDecorator x:Name="PART_DragDropAdornerDecorator">
                <!-- The TableViewScrollViewer takes care of laying out the various sections of
              a DataGrid in TableView: FixedHeaders, FixedFooters, RowSelectorPane, etc. -->
                <views:TableViewScrollViewer x:Name="PART_ScrollViewer"
                                         Style="{DynamicResource ScrollViewerStyleForGrid}"
                                         ShowRowSelectorPane="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).ShowRowSelectorPane}"
                                         RowSelectorPaneWidth="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).RowSelectorPaneWidth}"
                                         Padding="{TemplateBinding Padding}">


                    <views:TableViewItemsHost />

                </views:TableViewScrollViewer>
            </AdornerDecorator>
        </Border>

    </ControlTemplate>



    <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
    <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

        <Grid Background="Transparent"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">

            <Grid Width="16"
               Background="Transparent"
               HorizontalAlignment="Center">

                <ContentPresenter x:Name="glyphPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,0,0"
                              Opacity="{TemplateBinding Opacity}" />

                <ContentPresenter x:Name="filterActivatedGlyphPresenter"
                              ContentTemplate="{x:Null}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,2,0"
                              Opacity="{TemplateBinding Opacity}">

                </ContentPresenter>
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>

            <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
            <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="True">

                <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}" />

                <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterGlyph}" />

            </DataTrigger>

            <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
            <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="False">

                <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}" />

            </DataTrigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>


    <!--**************************
    * TEMPLATE: StatCell 
    ************************** -->
    <ControlTemplate x:Key="tableViewStatCellTemplate"
                    TargetType="local:StatCell">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

            <local:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

        </Border>

        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
                <Setter Property="Visibility"
                    Value="Collapsed" />
            </DataTrigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: GroupByControl
    ************************** -->
    <ControlTemplate x:Key="tableViewGroupByControlTemplate"
                    TargetType="local:GroupByControl">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

            <!-- This Grid is used to position the ItemsPresenter over the ContentPresenter in charge
              of displaying the NoGroupContent. -->
            <Grid>

                <!-- This ContentPresenter displays the value of the NoGroupContent property
                 of the GroupByControl. This content must only be displayed when there are
                 no groups present, so we set its Visibility to Collapsed by default and
                 it is made visible via a trigger. -->
                <ContentPresenter x:Name="noGroupContentPresenter"
                              Content="{TemplateBinding NoGroupContent}"
                              VerticalAlignment="Center"
                              Visibility="Collapsed" />

                <!-- The GroupByControl is an ItemsControl, so it must have an ItemsPresenter in its
                 Template in order to layout and show its child items. The default ItemsPanel
                 of the GroupByControl is a "StaircasePanel", which layout its items in a
                 staircase-like pattern and draws connecting lines between the items. -->
                <ItemsPresenter />

            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <!-- When there are no groups, make the NoGroupContent visible. -->
            <Trigger Property="HasItems"
                  Value="False">

                <Setter TargetName="noGroupContentPresenter"
                    Property="Visibility"
                    Value="Visible" />
            </Trigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: GroupByItem
    ************************** -->
    <ControlTemplate x:Key="tableViewGroupByItemTemplate"
                    TargetType="local:GroupByItem">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}">

            <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
            <StackPanel Orientation="Horizontal">

                <!-- Same ContentPresenter as in the base Cell Template. -->
                <ContentPresenter Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                <!-- ContentPresenter that is used to display the sort glyph.
                 We explicitely set its Content property to Null to prevent the XAML parser
                 from implicitely setting it to its TemplatedParent's Content. -->
                <ContentPresenter x:Name="sortGlyphPresenter"
                              Content="{x:Null}"
                              ContentTemplate="{x:Null}" />

            </StackPanel>
        </Border>

        <ControlTemplate.Triggers>

            <!-- The following 2 triggers allow to display the appropriate Sort Glyph
              depending on the ParentColumn's SortDirection. -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

                <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).AscendingSortGlyph}" />

                <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

                <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DescendingSortGlyph}" />

                <Setter TargetName="sortGlyphPresenter"
                    Property="Margin"
                    Value="6,0,0,0" />

            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: GroupLevelIndicator
    ************************** -->
    <ControlTemplate x:Key="tableViewGroupLevelIndicatorTemplate"
                    TargetType="local:GroupLevelIndicator">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}" />

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: DetailIndicator
    ************************** -->
    <ControlTemplate x:Key="tableViewDetailIndicatorTemplate"
                    TargetType="local:DetailIndicator">

        <Border Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Padding="{TemplateBinding Padding}" />

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: GroupLevelIndicatorPane
    ************************** -->
    <ControlTemplate x:Key="tableViewGroupLevelIndicatorPaneTemplate"
                    TargetType="local:GroupLevelIndicatorPane">
        <Grid>

            <Border x:Name="horizontalBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top'}" />

            <Border x:Name="verticalBorder"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 Padding="{TemplateBinding Padding}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Left'}">
                <StackPanel x:Name="PART_GroupLevelIndicatorHost"
                        Orientation="Horizontal" />
            </Border>

        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsLeaf"
                          Value="True" />
                    <Condition Property="views:ViewBase.IsLastItem"
                          Value="True" />
                    <Condition Property="local:DataGridControl.HasExpandedDetails"
                          Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="horizontalBorder"
                    Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Top, Bottom'}" />
                <Setter TargetName="verticalBorder"
                    Property="Margin"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter='Bottom'}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>

                    <Condition Property="CurrentIndicatorCount"
                          Value="0" />

                    <Condition Property="IsLeaf"
                          Value="False" />

                </MultiTrigger.Conditions>

                <Setter TargetName="verticalBorder"
                    Property="BorderThickness"
                    Value="0" />

            </MultiTrigger>

            <Trigger Property="ShowVerticalBorder"
                  Value="False">
                <Setter TargetName="verticalBorder"
                    Property="BorderThickness"
                    Value="0" />
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--**************************
    * TEMPLATE: HierarchicalGroupLevelIndicatorPane
    ************************** -->
    <ControlTemplate x:Key="tableViewHierarchicalGroupLevelIndicatorPaneTemplate"
                    TargetType="local:HierarchicalGroupLevelIndicatorPane">
        <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
            <StackPanel x:Name="PART_GroupLevelIndicatorHost"
                     Orientation="Horizontal" />
        </Border>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: HierarchicalGroupByControl
    ************************** -->

    <!-- DataTemplate for DataGridContext displayed inside the HierarchicalGroupByControl -->
    <HierarchicalDataTemplate x:Key="dataGridContextTemplate"
                             DataType="{x:Type local:DataGridContext}"
                             ItemsSource="{Binding Path=DetailConfigurations}">

        <local:HierarchicalGroupByControlNode x:Name="groupByControlNode"
                                            ItemsSource="{Binding Path=GroupLevelDescriptions}"
                                            Title="{Binding Path=SourceDetailConfiguration.Title}" />

        <!-- Trigger to bind Title to the DataGridContext.DataGridControl.ItemsSourceName if DataGridContext.ParentDataGridContext is null -->
        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=SourceDetailConfiguration}"
                      Value="{x:Null}">
                <Setter TargetName="groupByControlNode"
                    Property="Title">
                    <Setter.Value>
                        <Binding Path="DataGridControl.ItemsSourceName" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>

    </HierarchicalDataTemplate>

    <!-- DataTemplate for DetailConfiguration displayed inside the HierarchicalGroupByControlNode -->
    <HierarchicalDataTemplate x:Key="detailConfigurationTemplate"
                             DataType="{x:Type local:DetailConfiguration}"
                             ItemsSource="{Binding Path=DetailConfigurations}">

        <local:HierarchicalGroupByControlNode ItemsSource="{Binding Path=GroupLevelDescriptions}"
                                            Title="{Binding Title}" />
    </HierarchicalDataTemplate>

    <conv:TypeToVisibilityConverter x:Key="notDetailConfigConverter"
                                   Visibility="Visible"
                                   SetVisibilityWhenTrue="False" />

    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />

    <!-- TreeViewItem Style to avoid displaying Expander and avoid selection and click -->
    <Style x:Key="hierarchicalGroupByControlTreeViewItemStyle"
          TargetType="{x:Type TreeViewItem}">

        <Setter Property="IsExpanded"
              Value="True" />

        <Setter Property="Focusable"
              Value="False" />

        <Setter Property="Visibility">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="."
                        Converter="{StaticResource notDetailConfigConverter}" 
                        ConverterParameter="{x:Type local:DetailConfiguration}"/>
                    <Binding Path="Visible"
                        Converter="{StaticResource booleanToVisibilityConverter}" />
                </PriorityBinding>

            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>

                            <!--This ColumnDefinition is required for stair spacing-->
                            <ColumnDefinition Width="19" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                          Padding="{TemplateBinding Control.Padding}"
                          BorderBrush="{TemplateBinding Border.BorderBrush}"
                          Background="{TemplateBinding Panel.Background}"
                          Name="treeViewItemBorder"
                          SnapsToDevicePixels="True"
                          Grid.Column="1">


                            <!--Will contain DetailGroupByConrol-->

                            <ContentPresenter Content="{TemplateBinding HeaderedContentControl.Header}"
                                       ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                       ContentSource="Header"
                                       Name="PART_Header"
                                       HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                       SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>

                        <ItemsPresenter Name="ItemsHost"
                                  Grid.Column="1"
                                  Grid.Row="1"
                                  Grid.ColumnSpan="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="tableViewCommonHierarchicalGroupByControlTemplate"
                    TargetType="local:HierarchicalGroupByControl">

        <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the HierarchicalGroupByControl -->
        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <!-- HierarchicalGroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <!-- GroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />

                <!-- HierarchicalGroupByControl -->
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- The border responsible for the visual outline of the row (gridlines and background)
              spans the GroupLevelIndicatorPane and CellsHost Panel. Those 2 elements are not children of
              the Border because we don't want the border to be displayed in the GroupLevelIndicatorPane. -->
            <Border x:Name="rootBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Top'}"
                 Padding="{TemplateBinding Padding}" />

            <Border x:Name="verticalGridLineBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />


            <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0" />

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
            <local:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        Grid.Column="1" />

            <StackPanel Grid.Column="2"
                     Orientation="Horizontal">

                <TreeView x:Name="PART_HierarchicalGroupByControlTreeView"
                      ItemContainerStyle="{StaticResource hierarchicalGroupByControlTreeViewItemStyle}"
                      Background="Transparent"
                      BorderBrush="Transparent"
                      Focusable="False">

                    <TreeViewItem Header="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext)}"
                             HeaderTemplate="{StaticResource dataGridContextTemplate}"
                             ItemsSource="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).DetailConfigurations}"
                             ItemTemplate="{StaticResource detailConfigurationTemplate}"
                             ItemContainerStyle="{StaticResource hierarchicalGroupByControlTreeViewItemStyle}"
                             IsExpanded="True" />
                </TreeView>

                <ContentPresenter x:Name="noGroupContentPresenter"
                              Content="{TemplateBinding NoGroupContent}"
                              VerticalAlignment="Center"
                              Visibility="Collapsed"
                              Margin="5,0,0,0" />

            </StackPanel>

        </Grid>
        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasGroups}"
                      Value="True">

                <Setter TargetName="noGroupContentPresenter"
                    Property="Visibility"
                    Value="Visible" />

            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:GroupLevelIndicatorPane.GroupLevel)}"
                      Value="-1">
                <Setter TargetName="groupLevelIndicatorPane"
                    Property="Visibility"
                    Value="Collapsed" />
                <Setter TargetName="verticalGridLineBorder"
                    Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right, Left'}" />
            </DataTrigger>


        </ControlTemplate.Triggers>

    </ControlTemplate>





    <ControlTemplate x:Key="tableViewCommonHierarchicalGroupByControlOldGroupByControlTemplate"
                    TargetType="local:HierarchicalGroupByControl">

        <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the HierarchicalGroupByControl -->
        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <!-- HierarchicalGroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <!-- GroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />

                <!-- HierarchicalGroupByControl -->
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- The border responsible for the visual outline of the row (gridlines and background)
              spans the GroupLevelIndicatorPane and CellsHost Panel. Those 2 elements are not children of
              the Border because we don't want the border to be displayed in the GroupLevelIndicatorPane. -->
            <Border x:Name="rootBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).HorizontalGridLineBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).HorizontalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Top'}"
                 Padding="{TemplateBinding Padding}" />

            <Border x:Name="verticalGridLineBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 BorderBrush="{Binding RelativeSource={RelativeSource Self}, Path=(local:DataGridControl.DataGridContext).VerticalGridLineBrush}"
                 BorderThickness="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />


            <local:HierarchicalGroupLevelIndicatorPane Grid.Column="0" />

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
            <local:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        Grid.Column="1" />

            <local:GroupByControl Grid.Column="2"  x:Name="text_field"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               Background="{TemplateBinding Background}"
                               BorderThickness="{TemplateBinding BorderThickness}"                               
                               AllowGroupingModification="{TemplateBinding AllowGroupingModification}"
                               AllowSort="{TemplateBinding AllowSort}"
                               ConnectionLinePen="{TemplateBinding ConnectionLinePen}"
                               NoGroupContent="{TemplateBinding NoGroupContent}"
                               Foreground="Transparent"
                               views:TableView.CanScrollHorizontally="True"/>

        </Grid>

        <ControlTemplate.Resources>
            <Storyboard x:Key="OnMouseEnter1">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="text_field" Storyboard.TargetProperty="(local:GroupByControl.Foreground).(SolidColorBrush.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="Black"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>


            <Storyboard x:Key="OnMouseEnter_Copy1">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="text_field" Storyboard.TargetProperty="(local:GroupByControl.Foreground).(SolidColorBrush.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="Transparent"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>

        </ControlTemplate.Resources>


        <ControlTemplate.Triggers>

            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}"/>
            </EventTrigger>

            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard Storyboard="{StaticResource OnMouseEnter_Copy1}"/>
            </EventTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(local:GroupLevelIndicatorPane.GroupLevel)}"
                      Value="-1">
                <Setter TargetName="groupLevelIndicatorPane"
                    Property="Visibility"
                    Value="Collapsed" />
                <Setter TargetName="verticalGridLineBorder"
                    Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right, Left'}" />
            </DataTrigger>


        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: HierarchicalGroupByControlNode
    ************************** -->
    <ControlTemplate x:Key="tableViewHierarchicalGroupByControlNodeTemplate"
                    TargetType="local:HierarchicalGroupByControlNode">

        <StackPanel Orientation="Horizontal"
                  Background="{TemplateBinding Background}">

            <TextBlock x:Name="titleTextBlock"
                    Text="{TemplateBinding Title}"
                    Margin="0,0,10,0" />

            <ItemsPresenter Margin="0,0,0,10" />
        </StackPanel>

    </ControlTemplate>


    <!--**************************
    * TEMPLATE: AutoFilterControl
    ************************** -->

    <ControlTemplate x:Key="tableViewAutoFilterControlTemplate"
                    TargetType="local:AutoFilterControl">
        <Border x:Name="autoFilterControlBorder"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Button DockPanel.Dock="Top"
                    Grid.Row="0"
                    MinHeight="24"
                    Margin="2"
                    Foreground="White"
                    Content="{TemplateBinding ClearAutoFilterText}"
                    Command="local:AutoFilterControl.ClearAutoFilterValues"/>

                <!-- ItemsSource will be set in OnApplyTemplate of AutoFilterControl because the DataGridContext does not
             redirects automatically to the DataGridCollectionView for the Master level -->
                <ListBox x:Name="PART_DistinctValuesHost"
                     Grid.Row="1"
                     MaxHeight="350"
                     Width="200"
                     ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                     Background="{TemplateBinding Background}"
                     Foreground="{TemplateBinding Foreground}"
                     BorderThickness="0"
                     ItemTemplate="{TemplateBinding DistinctValueItemTemplate}"
                     ItemTemplateSelector="{TemplateBinding DistinctValueItemTemplateSelector}"
                     ItemContainerStyle="{TemplateBinding DistinctValueItemContainerStyle}"
                     ItemContainerStyleSelector="{TemplateBinding DistinctValueItemContainerStyleSelector}"
                     SelectionMode="Multiple" />
            </Grid>
        </Border>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: ScrollTip
    ************************** -->
    <ControlTemplate x:Key="tableViewScrollTipTemplate"
                    TargetType="{x:Type local:ScrollTip}">
        <ContentPresenter VerticalAlignment="Center"
                        HorizontalAlignment="Right"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).ScrollTipContentTemplate}"
                        ContentTemplateSelector="{Binding RelativeSource={RelativeSource Self},Path=(local:DataGridControl.DataGridContext).ScrollTipContentTemplateSelector}" />
    </ControlTemplate>





</ResourceDictionary>
