<!-- =======================================================================
  Xceed DataGrid for WPF - CUSTOMIZATION CODE - Default Styles and Templates
  Copyright (c) 2007-2010 Xceed Software Inc.

  [TableflowView.Aero.normalcolor.xaml]

  This file is part of the Xceed DataGrid for WPF product. The use and
  distribution of this Customization Code is subject to the terms
  and conditions refering to "Customization Code" that are specified in
  the XCEED SOFTWARE LICENSE AGREEMENT accompanying this product.
======================================================================= -->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xcdp="clr-namespace:Xceed.Wpf.Controls;assembly=Xceed.Wpf.Controls"
                    xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
                    xmlns:local="clr-namespace:ESRI.ArcLogistics.App"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:app_controls="clr-namespace:ESRI.ArcLogistics.App.Controls"
                    xmlns:app_converters="clr-namespace:ESRI.ArcLogistics.App.Converters"
                    xmlns:markup="clr-namespace:Xceed.Wpf.DataGrid.Markup;assembly=Xceed.Wpf.DataGrid"
                    xmlns:views="clr-namespace:Xceed.Wpf.DataGrid.Views;assembly=Xceed.Wpf.DataGrid"
                    xmlns:conv="clr-namespace:Xceed.Wpf.DataGrid.Converters;assembly=Xceed.Wpf.DataGrid"
                    xmlns:utils="clr-namespace:Xceed.Utils.Wpf.Markup;assembly=Xceed.Wpf.DataGrid">

    <ResourceDictionary.MergedDictionaries>

        <!-- Include the view independant and color-scheme independant theme resources -->
        <ResourceDictionary Source="Resources/Common.Resources.xaml" />

        <!-- Include the view dependant and color-scheme independant theme graphics -->
        <ResourceDictionary Source="Resources/TableView.ArcLogisticsCustom.Graphics.xaml" />

        <!-- Include the standard grid element templates -->
        <ResourceDictionary Source="Resources/TableflowView.GridElementTemplates.xaml" />
        
        <!-- Include the standard grid element templates -->
        <ResourceDictionary Source="Resources/ArcLogisticsCustom.Resources.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <!-- =================================================================== -->
    <!-- Resources specific to this View/Theme/ColorScheme                   -->
    <!-- =================================================================== -->

    <!-- Pen that is used to draw the drop mark when a ColumnHeader is dragged over another one. -->
    <!-- We do not use a DynamicResource since this instance of a Pen could be reused via multiple threads. See case: 113402. -->
    <Pen x:Key="dropMarkPen"
        Brush="{x:Static SystemColors.HighlightBrush}"
        Thickness="7" />

    <DataTemplate x:Key="groupByItemAscendingSortGlyph">
        <Canvas Height="4"
              Width="7">
            <Path Opacity="1"
               Data="M 3.59375,0.15625 C3.59375,0.15625 7,4 7,4 7,4 0,4 0,4 0,4 3.59375,0.15625 3.59375,0.15625 z"
               Fill="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}" />

            <Path Opacity="1"
               Data="M 0.5,3.5 C0.5,3.5 3.5,0.5 3.5,0.5 "
               Stroke="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}"
               StrokeThickness="1" />
        </Canvas>
    </DataTemplate>

    <DataTemplate x:Key="groupByItemDescendingSortGlyph">
        <Canvas Height="4"
              Width="7">
            <Path Opacity="1"
               Data="M 3.59375,4 C3.59375,4 7,0.15625 7,0.15625 7,0.15625 0,0.15625 0,0.15625 0,0.15625 3.59375,4 3.59375,4 z"
               Fill="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}" />

            <Path Opacity="1"
               Data="M 0.5,0.5 C0.5,0.5 3.5,3.5 3.5,3.5 "
               Stroke="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}"
               StrokeThickness="1" />
        </Canvas>
    </DataTemplate>

    <Thickness x:Key="columnManagerCellPadding"
              Left="3"
              Top="0"
              Right="3"
              Bottom="2" />

    <Thickness x:Key="groupHeaderPadding"
              Left="8"
              Top="1"
              Right="8"
              Bottom="3" />

    <SolidColorBrush x:Key="AlternatingRowBackground" Color="#FFE7E7E7"/>

    <SolidColorBrush x:Key="hotRowBorderBrush"
                    Color="#B2017599" />

    <SolidColorBrush x:Key="gridLineBrush"
                    Color="#FF726E6D" />

    <SolidColorBrush x:Key="errorBackgroundBrush"
                    Color="#FFFF0000" />

    <SolidColorBrush x:Key="errorForegroundBrush"
                    Color="White" />

    <SolidColorBrush x:Key="warningBackgroundBrush"
                    Color="#FFFFC400"/>

    <SolidColorBrush x:Key="warningForegroundBrush"
                    Color="#FF850808" />

    <LinearGradientBrush x:Key="hotOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

        <GradientStop Offset="0"
                    Color="#F8FCFD" />

        <GradientStop Offset="1"
                    Color="#EFF8FD" />

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="hotInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

        <GradientStop Offset="1"
                    Color="#33F1F8FD" />

        <GradientStop Offset="0"
                    Color="#33017599" />

    </LinearGradientBrush>

    <SolidColorBrush x:Key="selectionRowBorderBrush"
                    Color="#4C017599" />

    <LinearGradientBrush x:Key="selectionOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

        <GradientStop Offset="0"
                    Color="#E7F5FD" />

        <GradientStop Offset="1"
                    Color="#F6FBFD" />

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="selectionInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

        <GradientStop Offset="1"
                    Color="#33F1F8FD" />

        <GradientStop Offset="0"
                    Color="#33017599" />
        <GradientStop Color="#33EDF6FB" Offset="0.985"/>

    </LinearGradientBrush>

    <SolidColorBrush x:Key="inactiveSelectionRowBorderBrush"
                    Color="#4C017599" />

    <LinearGradientBrush x:Key="inactiveSelectionOuterRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

        <GradientStop Offset="1"
                    Color="#33F1F8FD" />

        <GradientStop Offset="0"
                    Color="#33017599" />


    </LinearGradientBrush>

    <LinearGradientBrush x:Key="inactiveSelectionInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">

        <GradientStop Offset="1"
                    Color="#33F1F8FD" />

        <GradientStop Offset="0"
                    Color="#33017599" />
    </LinearGradientBrush>

    <SolidColorBrush x:Key="hotSelectionRowBorderBrush"
                    Color="#CC017599"/>

    <LinearGradientBrush x:Key="hotSelectionOuterRowBackgroundBrush"
                        StartPoint="0.5,0"
                        EndPoint="0.5,1">

        <GradientStop Offset="0"
                    Color="#F2F9FD" />

        <GradientStop Offset="1"
                    Color="#DEF1FC" />

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="hotSelectionInnerRowBackgroundBrush"
                        StartPoint="0.5,1"
                        EndPoint="0.5,0">
        <GradientStop Offset="1"
                    Color="#33F1F8FD" />

        <GradientStop Offset="0"
                    Color="#33017599" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="verticalHeaderBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

        <GradientStop Offset="0"
                    Color="#FFFFFF" />

        <GradientStop Offset="1"
                    Color="#F0F1F4" />

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="horizontalHeaderBackgroundBrush"
                        StartPoint="0.5,0.99074"
                        EndPoint="0.5,0.0370377">

        <GradientStop Offset="0"
                    Color="#FFEBEBEB" />

        <GradientStop Offset="0.625"
                    Color="#FFFFFF" />

    </LinearGradientBrush>

    <SolidColorBrush x:Key="groupHeaderInnerBorderBrush" Color="#FFACBEDE"/>

    <SolidColorBrush x:Key="headerForegroundBrush"
                    Color="Black" />

    <SolidColorBrush x:Key="rowSelectorBorderBrush"
                    Color="#D5D5D5" />

    <SolidColorBrush x:Key="rowSelectorDelimiterBorderBrush"
                    Color="#FCFCFD" />

    <LinearGradientBrush x:Key="rowSelectorBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

        <GradientStop Offset="0"
                    Color="#FFFFFF" />

        <GradientStop Offset="1"
                    Color="#F0F1F4" />

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="rowSelectorHotBackgroundBrush"
                        StartPoint="0,0.5"
                        EndPoint="1,0.5">

        <GradientStop Offset="0"
                    Color="#33F2F9FC" />
        <GradientStop Offset="0.995"
                    Color="#33017599" />

    </LinearGradientBrush>

    <SolidColorBrush x:Key="rowSelectorPressedBackgroundBrush"
                        Color="#4C017599"/>

    <SolidColorBrush x:Key="columnManagerCellBorderBrush"
                        Color="#CCD0D0D0"/>


    <SolidColorBrush x:Key="columnManagerCellDelimiterBorderBrush"
                    Color="#CCFFFFFF" />

    <LinearGradientBrush x:Key="columnManagerCellBackgroundBrush"
                        StartPoint="0.482673,0.99074"
                        EndPoint="0.482673,0.0370377">

        <GradientStop Offset="0"
                    Color="#F1F2F4" />

        <GradientStop Offset="0.589"
                    Color="#F1F2F4" />

        <GradientStop Offset="0.609"
                    Color="#FFFFFF" />

        <GradientStop Offset="1"
                    Color="#FFFFFF" />

    </LinearGradientBrush>

    <SolidColorBrush x:Key="columnManagerCellHotBorderBrush"
                    Color="#FF7BBCD0" />
    <LinearGradientBrush x:Key="columnManagerCellHotBackgroundBrush"
                        StartPoint="0.483,0.99"
                        EndPoint="0.483,0.037">

        <GradientStop Offset="0"
                    Color="#33017599" />

        <GradientStop Offset="1"
                    Color="#33FFFFFF" />

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="columnManagerCellPressedBorderBrush"
                        StartPoint="0.483,0.991"
                        EndPoint="0.483,0.037">

        <GradientStop Offset="0"
                    Color="#33CAF0FD" />

        <GradientStop Offset="1"
                    Color="#33017599" />

    </LinearGradientBrush>


    <LinearGradientBrush x:Key="columnManagerCellPressedBackgroundBrush"
                        StartPoint="0.5,1.0"
                        EndPoint="0.5,0">

        <GradientStop Offset="1"
                    Color="#FFA6EAFF" />

        <GradientStop Offset="0.325"
                    Color="#FFFFFFFF" />
        <GradientStop Color="#33017599" Offset="1"/>

    </LinearGradientBrush>

    <SolidColorBrush x:Key="groupByControlForegroundBrush"
                    Color="White" />

    <Pen x:Key="groupByConnectionLinePen"
        Thickness="2"
        Brush="White" />

    <Thickness x:Key="columnManagerFlowCellPadding"
              Left="3"
              Top="0"
              Right="3"
              Bottom="2" />

    <DataTemplate x:Key="groupByItemAscendingSortFlowGlyph">
        <Canvas Height="4"
              Width="7">
            <Path Opacity="1"
               Data="M 3.59375,0.15625 C3.59375,0.15625 7,4 7,4 7,4 0,4 0,4 0,4 3.59375,0.15625 3.59375,0.15625 z"
               Fill="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}" />

            <Path Opacity="1"
               Data="M 0.5,3.5 C0.5,3.5 3.5,0.5 3.5,0.5 "
               Stroke="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}"
               StrokeThickness="1" />
        </Canvas>
    </DataTemplate>

    <DataTemplate x:Key="groupByItemDescendingSortFlowGlyph">
        <Canvas Height="4"
              Width="7">
            <Path Opacity="1"
               Data="M 3.59375,4 C3.59375,4 7,0.15625 7,0.15625 7,0.15625 0,0.15625 0,0.15625 0,0.15625 3.59375,4 3.59375,4 z"
               Fill="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}" />

            <Path Opacity="1"
               Data="M 0.5,0.5 C0.5,0.5 3.5,3.5 3.5,3.5 "
               Stroke="{Binding RelativeSource={RelativeSource Self},Path=(TextElement.Foreground)}"
               StrokeThickness="1" />
        </Canvas>
    </DataTemplate>
    
 
    <!-- =================================================================== -->
        <!-- Templates specific to this View/Theme/ColorScheme                   -->
        <!-- =================================================================== -->

    <!-- Style of group panel text -->

    <sys:String x:Key="HierarchicalGroupTextFlowValue">Drag a column header here to group by that column.</sys:String>

    <Style x:Key="HierarchicalGroupTextFlowStyle" TargetType="{x:Type TextBlock}">
        <Style.Resources>
            <Storyboard x:Key="OnMouseEnter1">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#FFFDFDFD"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="OnMouseEnter_Copy1">
                <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="{x:Null}" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
                    <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#00FAFAFB"/>
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard Storyboard="{StaticResource OnMouseEnter1}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard Storyboard="{StaticResource OnMouseEnter_Copy1}" x:Name="OnMouseEnter_Copy1_BeginStoryboard"/>
            </EventTrigger>
        </Style.Triggers>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="None"/>
    </Style>


    <!--**************************
    * TEMPLATE: GroupByControl (bold blue header with hidding text)
    ************************** -->
    <ControlTemplate x:Key="aeroNormalColorGroupByControlFlowTemplate"
                    TargetType="xcdg:GroupByControl">

        <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="0" SnapsToDevicePixels="True">

            <Grid SnapsToDevicePixels="True">

                <Border SnapsToDevicePixels="True"
                            Background="{DynamicResource AquamarineStyleHeaderBrush}">
                    <!--<Border Grid.RowSpan="3"
                             SnapsToDevicePixels="True"
                             BorderThickness="1"
                             Margin="1,0,0,1"
                             BorderBrush="{StaticResource groupHeaderInnerBorderBrush}" />-->
                </Border>


                <!-- This ContentPresenter displays the value of the NoGroupContent property
                 of the GroupByControl. This content must only be displayed when there are
                 no groups present, so we set its Visibility to Collapsed by default and
                 it is made visible via a trigger. -->
                <ContentPresenter x:Name="noGroupContentPresenter"
                              Margin="2"
                              VerticalAlignment="Center"
                              Visibility="Hidden">
                    <ContentPresenter.Content>
                        <TextBlock Style="{StaticResource HierarchicalGroupTextFlowStyle}" 
                                   Foreground="#00FAFAFB" Margin="2" 
                                   Text="{StaticResource HierarchicalGroupTextFlowValue}" 
                                   Background="Transparent" 
                                   VerticalAlignment="Center" 
                                   HorizontalAlignment="Stretch"/>
                    </ContentPresenter.Content>
                </ContentPresenter>

                <!-- The GroupByControl is an ItemsControl, so it must have an ItemsPresenter in its
                 Template in order to layout and show its child items. The default ItemsPanel
                 of the GroupByControl is a "StaircasePanel", which layout its items in a
                 staircase-like pattern and draws connecting lines between the items. -->
                <ItemsPresenter Margin="{TemplateBinding Padding}"/>

                <!-- Print button -->
                <ContentControl x:Name="PART_PrintContent"
                                    Margin="1"
                                    Width="Auto"
                                    Height="Auto"
                                    VerticalAlignment="Center" 
                                    HorizontalAlignment="Right"
                                 VerticalContentAlignment="Stretch"
                                HorizontalContentAlignment="Stretch"
                                    Content="{Binding Path=PrintButton, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type app_controls:DataGridControlEx}}}"/>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="HasItems"
                  Value="False">

                <Setter TargetName="noGroupContentPresenter"
                    Property="Visibility"
                    Value="Visible"/>
            </Trigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>


    <!--**************************
    * TEMPLATE: GroupNavigationControl
    ************************** -->
        <ControlTemplate x:Key="tableflowViewGroupNavigationControlTemplate"
                    TargetType="{x:Type xcdg:GroupNavigationControl}">

            <Grid>
                <Border x:Name="outlineBorder"
                 BorderBrush="#FF03395B"
                 BorderThickness="1"
                 Background="#00FFFFFF"
                 CornerRadius="4"
                 Opacity="0" />
                <Border x:Name="innerBorder"
                 BorderBrush="#CC82B9D8"
                 BorderThickness="1"
                 CornerRadius="3"
                 Margin="1"
                 Opacity="0" />

                <Grid>
                    <Grid.ColumnDefinitions>
                        <!-- Button part -->
                        <ColumnDefinition Width="*" />

                        <!-- Seperator part -->
                        <ColumnDefinition Width="Auto" />

                        <!-- Toggle button part -->
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Button x:Name="PART_Button"
                    Command="xcdg:GroupNavigationButton.NavigateToGroup"
                    CommandParameter="{TemplateBinding Group}"
                    Content="{TemplateBinding Group}"
                    ContentTemplate="{TemplateBinding MainItemTemplate}"
                    ContentTemplateSelector="{TemplateBinding MainItemTemplateSelector}"
                    Foreground="{TemplateBinding Foreground}"
                    Focusable="False"
                    Grid.Column="0">
                        <Button.Template>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border Background="Transparent">
                                    <ContentPresenter Margin="4,2,4,2" />
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <Border x:Name="seperator"
                    Grid.Column="1"
                    BorderThickness="0,0,1,0"
                    BorderBrush="#CC82B9D8"
                    Margin="0,4"
                    Visibility="Hidden" />

                    <ToggleButton x:Name="PART_ToggleButton"
                          Focusable="False"
                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                          Grid.Column="2"
                          Foreground="{TemplateBinding Foreground}">
                        <ToggleButton.Template>
                            <ControlTemplate>
                                <Border x:Name="toggleButtonBackground"
                             CornerRadius="0,6,6,0"
                             Background="Transparent">
                                    <Path x:Name="Arrow"
                              Fill="{TemplateBinding Foreground}"
                              Margin="7,1,7,1"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="M 0 0 L 4 4 L 0 8 Z"
                              Opacity="0.3" />
                                </Border>

                                <ControlTemplate.Triggers>
                                    <Trigger Property="ToggleButton.IsMouseOver"
                                 Value="True">
                                        <Setter TargetName="Arrow"
                                   Property="Opacity"
                                   Value="1" />
                                    </Trigger>
                                    <Trigger Property="ToggleButton.IsChecked"
                                 Value="True">
                                        <Setter TargetName="Arrow"
                                   Property="Opacity"
                                   Value="1" />
                                        <Setter TargetName="Arrow"
                                   Property="Margin"
                                   Value="5,1,5,1" />
                                        <Setter TargetName="Arrow"
                                   Property="Data"
                                   Value="M 0 0 L 4 4 L 8 0 Z" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>
                </Grid>

                <Popup x:Name="PART_Popup"
                Placement="Bottom"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                AllowsTransparency="True"
                Focusable="False"
                PopupAnimation="Slide">
                    <Grid SnapsToDevicePixels="True"
                  MinWidth="{TemplateBinding ActualWidth}"
                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border Background="White"
                       BorderBrush="Black"
                       BorderThickness="1"
                       TextElement.Foreground="Black">
                            <ScrollViewer CanContentScroll="True"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Auto">
                                <!--<ItemsPresenter />-->
                                <VirtualizingStackPanel IsItemsHost="True" />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </Popup>
            </Grid>

            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                  Value="True">
                    <Setter TargetName="outlineBorder"
                    Property="Opacity"
                    Value="1" />
                    <Setter TargetName="innerBorder"
                    Property="Opacity"
                    Value="1" />
                    <Setter TargetName="seperator"
                    Property="Visibility"
                    Value="Visible" />
                </Trigger>

                <Trigger Property="IsDropDownOpen"
                  Value="True">
                    <Setter TargetName="outlineBorder"
                    Property="Opacity"
                    Value="1" />
                    <Setter TargetName="innerBorder"
                    Property="Opacity"
                    Value="1" />
                    <Setter TargetName="seperator"
                    Property="Visibility"
                    Value="Visible" />
                </Trigger>

                <Trigger Property="IsEnabled"
                  Value="False">
                    <Setter Property="Opacity"
                    TargetName="outlineBorder"
                    Value="0" />
                    <Setter Property="Opacity"
                    TargetName="innerBorder"
                    Value="0" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--**************************
    * TEMPLATE: GroupNavigationButton
    ************************** -->
        <ControlTemplate x:Key="tableflowViewGroupNavigationButtonTemplate"
                    TargetType="{x:Type xcdg:GroupNavigationButton}">
            <Grid>
                <Border x:Name="outerBorder"
                 BorderBrush="#FF03395B"
                 BorderThickness="1"
                 Background="#00FFFFFF"
                 CornerRadius="4"
                 Opacity="0" />
                <Border x:Name="innerBorder"
                 BorderBrush="#CC82B9D8"
                 BorderThickness="1"
                 CornerRadius="3"
                 Margin="1"
                 Opacity="0" />

                <ContentPresenter Margin="4,2,4,2" />
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver"
                  Value="True">
                    <Setter Property="Opacity"
                    TargetName="outerBorder"
                    Value="1" />
                    <Setter Property="Opacity"
                    TargetName="innerBorder"
                    Value="1" />
                </Trigger>
                <Trigger Property="IsEnabled"
                  Value="False">
                    <Setter Property="Opacity"
                    TargetName="outerBorder"
                    Value="0" />
                    <Setter Property="Opacity"
                    TargetName="innerBorder"
                    Value="0" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--**************************
    * TEMPLATE: RowSelector 
    ************************** -->
        <ControlTemplate x:Key="tableflowViewRowSelectorTemplate"
                    TargetType="xcdg:RowSelector">

            <!-- This Grid is used to position the resizer Thumb over the RowSelector -->
            <Grid>
                <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

                    <Grid>
                        <Viewbox MaxHeight="16"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <ContentPresenter x:Name="contentPresenter"
                                    Margin="1"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        </Viewbox>

                        <!-- This is the two white lines we see at top and bottom of the RowSelector Item. More visible on MouseOver -->
                        <Border BorderThickness="0,1,0,1"
                       Margin="0,1,0,0"
                       BorderBrush="{StaticResource rowSelectorDelimiterBorderBrush}"
                       Opacity="0.4" />

                    </Grid>
                </Border>

                <!-- Thumb that is used to resize the Row. -->
                <Thumb x:Name="PART_RowResizerThumb"
                Style="{StaticResource invisibleThumbStyle}"
                VerticalAlignment="Bottom" />

            </Grid>

            <ControlTemplate.Triggers>

                <Trigger Property="IsMouseOver"
                  Value="True">

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource rowSelectorHotBackgroundBrush}" />

                </Trigger>

                <Trigger Property="IsPressed"
                  Value="True">

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource rowSelectorPressedBackgroundBrush}" />

                </Trigger>

            </ControlTemplate.Triggers>

        </ControlTemplate>

        <!--**************************
    * TEMPLATE: Row 
    ************************** -->

    <!-- ////////////////////////////////////////////////////-->

    <SolidColorBrush Color="#FF9BC4D0" x:Key="DragOverRowBackground"/>

    <app_converters:DataContextToBooleanConverter x:Key="dataContextToBoolConverter"/>

    <ControlTemplate x:Key="tableflowViewRowTemplate"
                    TargetType="{x:Type xcdg:Row}">

        <ControlTemplate.Resources>
            <xcdg:TypeToBooleanConverter x:Key="typeToBooleanConverter" />

            <Storyboard x:Key="OnDragEnter">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dragOverBackground" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="innerBackground" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="OnDragLeave">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="dragOverBackground" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="innerBackground" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>

        <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the CellsHost panel. -->
        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <!-- HierarchicalGroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <!-- GroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />


                <!-- CellsHost panel -->
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <xcdg:HierarchicalGroupLevelIndicatorPane xcdg:TableView.CanScrollHorizontally="False"
                                                    Grid.Column="0" />

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
            <xcdg:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        xcdg:TableView.CanScrollHorizontally="False"
                                        Grid.Column="1" />

            <Border x:Name="outerBackground"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <Border x:Name="dragOverBackground"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 Opacity="0"
                 Background="{StaticResource DragOverRowBackground}"
                 BorderBrush="Transparent"
                 BorderThickness="0"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <Border x:Name="rowBorder"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 BorderThickness="1"
                 CornerRadius="3"
                 xcdg:TableView.CanScrollHorizontally="False">
                <Border x:Name="innerBackground"
                    BorderThickness="0"
                    CornerRadius="2" />
            </Border>

            <!-- Button that is used to expand/collapse the group. -->
            <Button x:Name="detailsToggle"
                 Template="{StaticResource detailsExpanderButtonTemplate}"
                 VerticalAlignment="Top"
                 Grid.Column="2"
                 Margin="2,4,2,0"
                 Command="{x:Static xcdg:DataGridCommands.ToggleDetailExpansion}"
                 OverridesDefaultStyle="True"
                 Focusable="True"
                 Visibility="Hidden"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <!-- This TextBlock is used to ensure that the DesiredSize for 
         the Row will never fall below the Height of a String using the inherited font size and face-->
            <TextBlock Text=""
                    Visibility="Hidden"
                    Grid.Column="3"
                    Margin="{TemplateBinding BorderThickness}" />

            <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
            <xcdg:FixedCellPanel x:Name="PART_CellsHost"
                               Grid.Column="3"
                               ColumnStretchMinWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth, RelativeSource={RelativeSource Self}}"
                               ColumnStretchMode="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode, RelativeSource={RelativeSource Self}}"
                               FixedCellCount="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay, RelativeSource={RelativeSource Self}}"
                               SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}"
                               SplitterWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnSplitterWidth, RelativeSource={RelativeSource Self}}"
                               ShowSplitter="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}"
                               FixedColumnDropMarkPen="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen, RelativeSource={RelativeSource Self}}"
                               TextElement.Foreground="{TemplateBinding Foreground}"
                               Margin="0" />

        </Grid>

        <ControlTemplate.Triggers>

            <!-- Drag'n'Drop triggers -->
            <EventTrigger RoutedEvent="DragDrop.DragOver">
                <BeginStoryboard Storyboard="{StaticResource OnDragEnter}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="DragDrop.DragLeave">
                <BeginStoryboard Storyboard="{StaticResource OnDragLeave}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="DragDrop.Drop">
                <BeginStoryboard Storyboard="{StaticResource OnDragLeave}"/>
            </EventTrigger>

            <!-- This trigger is used to display the Active Selection look -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource selectionOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource selectionInnerRowBackgroundBrush}" />

            </MultiDataTrigger>

            <!-- This trigger is used to display the Inactive Selection look -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="False" />

                    <Condition Binding="{Binding Path=HideSelection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="False" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

            </MultiDataTrigger>

            <!-- This trigger is used to display Mouse Over look -->
            <Trigger Property="IsMouseOver"
                  Value="True">

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />


            </Trigger>

            <!-- This trigger is used to display Mouse Over + Selected look -->
            <MultiTrigger>
                <MultiTrigger.Conditions>

                    <Condition Property="IsMouseOver"
                          Value="True" />

                    <Condition Property="IsSelected"
                          Value="True" />

                </MultiTrigger.Conditions>

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotSelectionRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionInnerRowBackgroundBrush}" />

            </MultiTrigger>

            <!-- This trigger is reponsible to hide the FixedColumnSplitter if the FixedColumnCount is 0 and we are Grouped.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, RelativeSource={RelativeSource Self}}"
                          Value="0" />

                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}"
                              Path="(xcdg:DataGridControl.DataGridContext).GroupLevelDescriptions.Count">
                                <Binding.Converter>
                                    <xcdg:GreaterThanZeroConverter />
                                </Binding.Converter>
                            </Binding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="PART_CellsHost"
                    Property="ShowSplitter"
                    Value="False" />
            </MultiDataTrigger>

            <!-- When the FixedColumnCount is 0 and there are details, do not display the FixedColumn splitter in the Row Template, it will be displayed
              in the margin of the ColumnManagerRow instead-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, RelativeSource={RelativeSource Self}}"
                          Value="0" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="PART_CellsHost"
                    Property="ShowSplitter"
                    Value="False" />
            </MultiDataTrigger>

            <!-- When there are details, display the Toggle button for the expansion, collapsing of the details -->

            <DataTrigger Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="False" >
                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Value="True"
                          Binding="{Binding Path=., Converter={StaticResource typeToBooleanConverter}, ConverterParameter={x:Type xcdg:DataRow}, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                    <Condition Value="False"
                          Binding="{Binding Path=., Converter={StaticResource typeToBooleanConverter}, ConverterParameter={x:Type xcdg:InsertionRow}, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource dataContextToBoolConverter}, Mode=OneWay}"
                      Value="True"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Visible" />

            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True"
                          Binding="{Binding Path=., Converter={StaticResource typeToBooleanConverter}, ConverterParameter={x:Type xcdg:InsertionRow}, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource dataContextToBoolConverter}, Mode=OneWay}"
                      Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden"/>
            </MultiDataTrigger>


        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: InsertionRow 
    ************************** -->

    <!-- ////////////////////////////////////////////////////-->

    <xcdg:TypeToBooleanConverter x:Key="typeToBooleanConverter" />

    <ControlTemplate x:Key="tableflowViewInsertionRowTemplate"
                    TargetType="{x:Type xcdg:Row}">


        <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the CellsHost panel. -->
        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <!-- HierarchicalGroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <!-- GroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />

                <!-- CellsHost panel -->
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <xcdg:HierarchicalGroupLevelIndicatorPane xcdg:TableView.CanScrollHorizontally="False"
                                                    Grid.Column="0" />

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
            <xcdg:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        xcdg:TableView.CanScrollHorizontally="False"
                                        Grid.Column="1" />

            <Border x:Name="outerBackground"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <Border x:Name="dragOverBackground"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 Opacity="0"
                 Background="{StaticResource DragOverRowBackground}"
                 BorderBrush="Transparent"
                 BorderThickness="0"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <Border x:Name="rowBorder"
                 Grid.Column="2"
                 Grid.ColumnSpan="2"
                 BorderThickness="1"
                 CornerRadius="3"
                 xcdg:TableView.CanScrollHorizontally="False">
                <Border x:Name="innerBackground"
                    BorderThickness="0"
                    CornerRadius="2" />
            </Border>

            <!-- Button that is used to expand/collapse the group. -->
            <Button x:Name="detailsToggle"
                 Template="{StaticResource detailsExpanderButtonTemplate}"
                 VerticalAlignment="Top"
                 Grid.Column="2"
                 Margin="2,4,2,0"
                 Command="{x:Static xcdg:DataGridCommands.ToggleDetailExpansion}"
                 OverridesDefaultStyle="True"
                 Focusable="True"
                 Visibility="Hidden"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <!-- This TextBlock is used to ensure that the DesiredSize for 
         the Row will never fall below the Height of a String using the inherited font size and face-->
            <TextBlock Text=""
                    Visibility="Hidden"
                    Grid.Column="3"
                    Margin="{TemplateBinding BorderThickness}" />

            <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
            <xcdg:FixedCellPanel x:Name="PART_CellsHost"
                               Grid.Column="3"
                               ColumnStretchMinWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth, RelativeSource={RelativeSource Self}}"
                               ColumnStretchMode="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode, RelativeSource={RelativeSource Self}}"
                               FixedCellCount="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay, RelativeSource={RelativeSource Self}}"
                               SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}"
                               SplitterWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnSplitterWidth, RelativeSource={RelativeSource Self}}"
                               ShowSplitter="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}"
                               FixedColumnDropMarkPen="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen, RelativeSource={RelativeSource Self}}"
                               TextElement.Foreground="{TemplateBinding Foreground}"
                               Margin="0" />

        </Grid>

        <ControlTemplate.Triggers>


            <!-- This trigger is used to display the Active Selection look -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource selectionOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource selectionInnerRowBackgroundBrush}" />

            </MultiDataTrigger>

            <!-- This trigger is used to display the Inactive Selection look -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="False" />

                    <Condition Binding="{Binding Path=HideSelection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="False" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource inactiveSelectionRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

            </MultiDataTrigger>

            <!-- This trigger is used to display Mouse Over look -->
            <Trigger Property="IsMouseOver"
                  Value="True">

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotRowBorderBrush}" />

                <!--<Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotOuterRowBackgroundBrush}" />-->

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotInnerRowBackgroundBrush}" />


            </Trigger>

            <!-- This trigger is used to display Mouse Over + Selected look -->
            <MultiTrigger>
                <MultiTrigger.Conditions>

                    <Condition Property="IsMouseOver"
                          Value="True" />

                    <Condition Property="IsSelected"
                          Value="True" />

                </MultiTrigger.Conditions>

                <Setter TargetName="rowBorder"
                    Property="BorderBrush"
                    Value="{StaticResource hotSelectionRowBorderBrush}" />

                <Setter TargetName="outerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionOuterRowBackgroundBrush}" />

                <Setter TargetName="innerBackground"
                    Property="Background"
                    Value="{StaticResource hotSelectionInnerRowBackgroundBrush}" />

            </MultiTrigger>

            <!-- This trigger is reponsible to hide the FixedColumnSplitter if the FixedColumnCount is 0 and we are Grouped.-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, RelativeSource={RelativeSource Self}}"
                          Value="0" />

                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}"
                              Path="(xcdg:DataGridControl.DataGridContext).GroupLevelDescriptions.Count">
                                <Binding.Converter>
                                    <xcdg:GreaterThanZeroConverter />
                                </Binding.Converter>
                            </Binding>
                        </Condition.Binding>
                    </Condition>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="PART_CellsHost"
                    Property="ShowSplitter"
                    Value="False" />
            </MultiDataTrigger>

            <!-- When the FixedColumnCount is 0 and there are details, do not display the FixedColumn splitter in the Row Template, it will be displayed
              in the margin of the ColumnManagerRow instead-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, RelativeSource={RelativeSource Self}}"
                          Value="0" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="PART_CellsHost"
                    Property="ShowSplitter"
                    Value="False" />
            </MultiDataTrigger>

            <!-- When there are details, display the Toggle button for the expansion, collapsing of the details -->

            <DataTrigger Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="False" >
                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Value="True"
                          Binding="{Binding Path=., Converter={StaticResource typeToBooleanConverter}, ConverterParameter={x:Type xcdg:DataRow}, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                    <Condition Value="False"
                          Binding="{Binding Path=., Converter={StaticResource typeToBooleanConverter}, ConverterParameter={x:Type xcdg:InsertionRow}, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource dataContextToBoolConverter}, Mode=OneWay}"
                      Value="True"/>
                </MultiDataTrigger.Conditions>

                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Visible" />

            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True"
                          Binding="{Binding Path=., Converter={StaticResource typeToBooleanConverter}, ConverterParameter={x:Type xcdg:InsertionRow}, Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=DataContext, Converter={StaticResource dataContextToBoolConverter}, Mode=OneWay}"
                      Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden"/>
            </MultiDataTrigger>


        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: Cell 
    ************************** -->
        <ControlTemplate x:Key="tableflowViewCellTemplate"
                    TargetType="xcdg:Cell">
        <Grid Margin="0,1,0,1">

            <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="2,1,2,1"
                 Margin="0,0,0,0">
                <Grid Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <xcdg:CellContentPresenter 
                                        x:Name="cellContentPresenter"
                                        Grid.Column="0"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    <Image x:Name="CellErrorGlyph"
                           Grid.Column="1" 
                           Source="/ESRI.ArcLogistics.App;component/Resources/PNG_Icons/IncompleteB16.png"
                           Width="17"
                           Height="16"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"                        
                           Visibility="Collapsed"
                           Stretch="None"
                           Margin="0"/>

                    <Image x:Name="CellWarningGlyph" 
                           Grid.Column="1" 
                           Source="/ESRI.ArcLogistics.App;component/Resources/PNG_Icons/Warning16.png"
                           Width="17"
                           Height="16"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Visibility="Collapsed"
                           Stretch="None"
                           Margin="0"/>
                </Grid>
            </Border>

            <Border x:Name="currentBorder"
                 BorderBrush="Transparent"
                 BorderThickness="1,0,1,0" />

            <!--<Grid VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch"
                  Background="Transparent"
                  x:Name="lockedGrid"
                  Visibility="Collapsed"/>-->

        </Grid>

        <ControlTemplate.Triggers>

            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsBeingEdited, RelativeSource={RelativeSource Self}}"
                          Value="True" />


                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    <Condition Binding="{Binding Path=IsCurrent, RelativeSource={RelativeSource Self}}"
                          Value="True"/>

                </MultiDataTrigger.Conditions>

                <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="White" />

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />
                
            </MultiDataTrigger>-->


            <!-- When changing the appearance (e.g., background/foreground) of the Cell to reflect specific
              states (e.g., IsCurrent), it is recommended to apply the changes directly to the template
              elements because we want those modifications to be effective even when a value has been
              explicitly set to these properties on the TemplatedParent. Also, when someone queries
              the value of these properties on the TemplatedParent, we don't want to return the
              intermediate, state-specific values. -->

            <!-- When the Cell is Current, we want to change its background/foreground to the appropriate brushes.
              We do this only when the cell does not have a validation error because we must give priority
              to the CellErrorStyle (if present).-->

            <MultiTrigger>
                <MultiTrigger.Conditions>

                    <Condition Property="IsBeingEdited"
                          Value="True" />
                    <Condition Property="IsKeyboardFocusWithin"
                          Value="True" />

                </MultiTrigger.Conditions>

                <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="White" />

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

            </MultiTrigger>

            <!-- Triggers show validation glyphs -->
            <!-- ///////////////////////////////////////////////////////////////////////// -->

            <MultiTrigger>
                <MultiTrigger.Conditions>

                    <Condition Property="HasValidationError"
                               Value="True"/>

                    <Condition Property="IsValidationErrorRestrictive"
                               Value="True"/>

                </MultiTrigger.Conditions>
                <Setter TargetName="CellErrorGlyph" Property="Visibility" Value="Visible"/>

                <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="White" />

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>

                    <Condition Property="HasValidationError"
                               Value="True"/>

                    <Condition Property="IsValidationErrorRestrictive"
                               Value="False"/>

                </MultiTrigger.Conditions>

                <Setter TargetName="CellWarningGlyph" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <!-- ///////////////////////////////////////////////////////////////////////// -->

            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsCurrent, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />
                
                <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="White" />

            </MultiDataTrigger>-->

            <!-- When the Row is Selected but the parent DataGridControl is not focused, we want to change
              the Row's background/foreground to the appropriate brushes. -->
            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsCurrent, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                    
                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=HideSelection, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataGridControl}}}"
                          Value="False" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

            </MultiDataTrigger>-->

            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsCurrent, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:Row}}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

            </MultiDataTrigger>-->


            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>

                    <Condition Binding="{Binding Path=IsCurrent, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="currentBorder"
                    Property="BorderBrush"
                    Value="{StaticResource selectionRowBorderBrush}" />

            </MultiDataTrigger>-->




            <!-- When the Cell's content is Null and the row is not being edited, we want to ensure that the row/cell
              will preserve a minimum height based on the current font size for the row/cell. To do this, we override
              the ContentPresenter's content binding and replace it with an empty string (""), the textbox generated 
              this way will then size to the default text's height. When the trigger is not active anymore, default binding
              is restored automatically. -->

            <DataTrigger Binding="{Binding Path=ParentColumn.Visible, RelativeSource={RelativeSource Self}}"
                      Value="False">
                <Setter Property="Visibility"
                    Value="Collapsed" />
            </DataTrigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

        <!--**************************
     * TEMPLATE: FilterToggleButton
      **************************-->
        <ControlTemplate TargetType="{x:Type ToggleButton}"
                    x:Key="filterToggleButton">

            <Grid Background="Transparent"
            VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">

                <Grid Width="16"
               Background="Transparent"
               HorizontalAlignment="Center">

                    <ContentPresenter x:Name="glyphPresenter"
                              ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,0,0"
                              Opacity="{TemplateBinding Opacity}" />

                    <ContentPresenter x:Name="filterActivatedGlyphPresenter"
                              ContentTemplate="{x:Null}"
                              Content="{TemplateBinding Content}"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center"
                              Margin="0,0,2,0"
                              Opacity="{TemplateBinding Opacity}">

                    </ContentPresenter>
                </Grid>
            </Grid>

            <ControlTemplate.Triggers>

                <!-- Display AutoFilterGlyph when there are AutoFilterValues -->
                <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="True">

                    <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{x:Null}" />

                    <Setter TargetName="filterActivatedGlyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AutoFilterGlyph}" />

                </DataTrigger>

                <!-- Restore DropDownGlyph when there are no AutoFilterValues -->
                <DataTrigger Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}"
                      Value="False">

                    <Setter TargetName="glyphPresenter"
                    Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AutoFilterDropDownGlyph}" />

                </DataTrigger>

            </ControlTemplate.Triggers>

        </ControlTemplate>

        <!--**************************
    * TEMPLATE: ColumnManagerCell 
    ************************** -->
        <ControlTemplate x:Key="tableflowViewColumnManagerCellTemplate"
                    TargetType="xcdg:ColumnManagerCell">
            <ControlTemplate.Resources>
                <Style TargetType="ToggleButton">
                    <Setter Property="Template"
                    Value="{StaticResource filterToggleButton}" />
                </Style>
            </ControlTemplate.Resources>

            <!-- This Grid is used to position the resizer Thumb over the ColumnManagerCell -->
            <Grid>

                <Border x:Name="rootBorder"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}">

                    <DockPanel>

                        <Grid>

                            <DockPanel Margin="{TemplateBinding Padding}">

                                <ContentPresenter x:Name="sortGlyphPresenter"
                                       DockPanel.Dock="Top"
                                       Content="{x:Null}"
                                       ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AscendingSortGlyph}"
                                       Visibility="Hidden"
                                       HorizontalAlignment="Center" />
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <xcdg:CellContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                                    <Border x:Name="thumbToggleBackgroundBorder"
                                Grid.Column="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="0"
                                Background="{StaticResource horizontalHeaderBackgroundBrush}">

                                        <ToggleButton x:Name="toggleButton"
                                         Focusable="False"
                                         VerticalAlignment="Stretch"
                                         Visibility="Collapsed"
                                         Margin="2,0,0,0"
                                         Opacity="0.5" />

                                    </Border>
                                </Grid>

                            </DockPanel>

                            <Border x:Name="delimiterBorder"
                          BorderThickness="1,0,1,0"
                          BorderBrush="{StaticResource rowSelectorDelimiterBorderBrush}" />


                            <xcdg:AutoFilterPopup x:Name="filterOptions"
                                         PopupAnimation="Slide"
                                         IsOpen="{Binding ElementName=toggleButton,
                                                    Path=IsChecked,
                                                    Mode=TwoWay,
                                                    UpdateSourceTrigger=PropertyChanged}"
                                         StaysOpen="False"
                                         AllowsTransparency="True"
                                         PlacementTarget="{Binding ElementName=toggleButton}">

                                <xcdg:AutoFilterControl x:Name="autoFilterControl"
                                              Background="White"
                                              BorderBrush="Black"
                                              BorderThickness="1"
                                              AutoFilterColumn="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=xcdg:ColumnManagerCell},
                                                            Path=ParentColumn}"
                                              Style="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType=xcdg:ColumnManagerCell}, 
                                                 Path=ParentColumn.AutoFilterControlStyle}"
                                              TextElement.Foreground="{TemplateBinding TextElement.Foreground}" />
                            </xcdg:AutoFilterPopup>

                        </Grid>

                    </DockPanel>

                </Border>

                <!-- Thumb that is used to resize the Column. -->
                <Thumb x:Name="PART_ColumnResizerThumb"
                Style="{StaticResource invisibleThumbStyle}"
                HorizontalAlignment="Right" />

            </Grid>

            <ControlTemplate.Triggers>

                <!-- Trigger related to the filteringToggleButton-->
                <Trigger SourceName="toggleButton"
                  Property="IsMouseOver"
                  Value="True">

                    <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />
                </Trigger>

                <!-- Always visible if filterOptions popup IsOpen -->
                <Trigger SourceName="filterOptions"
                  Property="IsOpen"
                  Value="True">

                    <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                    <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                    <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

                </Trigger>

                <!-- Display FilterToggleButton Trigger on MouseOver -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}"
                          Value="True" />

                        <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

                </MultiDataTrigger>

                <!-- Display FilterToggleButton Trigger to display AutoFilterGlyph -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowAutoFilter}"
                          Value="True" />

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowAutoFilter}"
                          Value="True" />

                        <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasDistinctValues}" />

                        <Condition Value="True"
                          Binding="{Binding ElementName=autoFilterControl, Path=HasAutoFilterValues}" />

                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="toggleButton"
                    Property="Visibility"
                    Value="Visible" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="BorderThickness"
                    Value="1,0,0,0" />

                    <Setter TargetName="toggleButton"
                    Property="Opacity"
                    Value="1" />

                </MultiDataTrigger>

                <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection -->

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Ascending">

                    <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

                    <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

                </DataTrigger>

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}"
                      Value="Descending">

                    <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DescendingSortGlyph}" />

                    <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

                    <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

                </DataTrigger>

                <Trigger Property="IsMouseOver"
                  Value="True">

                    <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellHotBorderBrush}" />

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                    <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellHotBackgroundBrush}" />

                </Trigger>

                <Trigger Property="IsPressed"
                  Value="True">

                    <Setter TargetName="rootBorder"
                    Property="BorderBrush"
                    Value="{StaticResource columnManagerCellPressedBorderBrush}" />

                    <Setter TargetName="rootBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellPressedBackgroundBrush}" />

                    <Setter TargetName="thumbToggleBackgroundBorder"
                    Property="Background"
                    Value="{StaticResource columnManagerCellPressedBackgroundBrush}" />

                    <Setter TargetName="delimiterBorder"
                    Property="Visibility"
                    Value="Hidden" />

                </Trigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.HasFixedWidth}"
                          Value="True" />

                        <!-- Don't disable resizng if ColumnStretching can be disabled by an 
                    end-user resize. -->
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).RemoveColumnStretchingOnResize}"
                          Value="False" />
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}"
                      Value="False">
                    <Setter TargetName="PART_ColumnResizerThumb"
                    Property="IsEnabled"
                    Value="False" />
                </DataTrigger>

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}"
                      Value="False">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </DataTrigger>

            </ControlTemplate.Triggers>

        </ControlTemplate>



    <!--**************************
    * TEMPLATE: ColumnManagerRow 
    ************************** -->
    <ControlTemplate x:Key="tableflowViewColumnManagerRowTemplate"
                    TargetType="{x:Type xcdg:ColumnManagerRow}">

        <ControlTemplate.Resources>
            <xcdg:ThicknessConverter x:Key="thicknessConverter"
                                  InverseValue="True" />
        </ControlTemplate.Resources>

        <!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the CellsHost panel. -->
        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <!-- HierarchicalGroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <!-- GroupLevelIndicatorPane -->
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />

                <!-- CellsHost panel -->
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- The border responsible for the visual outline of the row (gridlines and background)
              spans the GroupLevelIndicatorPane and CellsHost Panel. Those 2 elements are not children of
              the Border because we don't want the border to be displayed in the GroupLevelIndicatorPane. -->
            <Border x:Name="rootBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="3"
                 xcdg:TableView.CanScrollHorizontally="False"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Padding="{TemplateBinding Padding}" />

            <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
                       whenever this Row is part of a group. -->
            <xcdg:HierarchicalGroupLevelIndicatorPane Grid.Column="0"
                                                    xcdg:TableView.CanScrollHorizontally="False"
                                                    Background="{TemplateBinding Background}" />
            <xcdg:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        Grid.Column="1"
                                        xcdg:TableView.CanScrollHorizontally="False"
                                        Background="{TemplateBinding Background}" />

            <!-- Button that is used to expand/collapse the group. -->
            <Button x:Name="detailsToggle"
                 Template="{StaticResource detailsExpanderButtonTemplate}"
                 VerticalAlignment="Top"
                 Grid.Column="2"
                 Margin="2,4,2,0"
                 Command="{x:Static xcdg:DataGridCommands.ToggleDetailExpansion}"
                 OverridesDefaultStyle="True"
                 Focusable="False"
                 Visibility="Collapsed"
                 xcdg:TableView.CanScrollHorizontally="False" />

            <!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
            <Decorator x:Name="indentationDecorator"
                    Grid.Column="3">
                <xcdg:FixedCellPanel x:Name="PART_CellsHost"
                                  ColumnStretchMinWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth, RelativeSource={RelativeSource Self}}"
                                  ColumnStretchMode="{Binding Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode, RelativeSource={RelativeSource Self}}"
                                  FixedCellCount="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay, RelativeSource={RelativeSource Self}}"
                                  SplitterStyle="{TemplateBinding xcdg:TableView.FixedColumnSplitterStyle}"
                                  SplitterWidth="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnSplitterWidth, RelativeSource={RelativeSource Self}}"
                                  ShowSplitter="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}"
                                  FixedColumnDropMarkPen="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen, RelativeSource={RelativeSource Self}}"
                                  Margin="{TemplateBinding BorderThickness}" />
            </Decorator>

        </Grid>
        <ControlTemplate.Triggers>
            <!-- This trigger ensures that if the FixedColumnCount is 0 and we are Grouped, the PART_CellsHost gets indented so the FixedColumnSplitter gets in the margin
              ( in the GroupLevelIndicator region )-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, RelativeSource={RelativeSource Self}}"
                          Value="0" />

                    <Condition Value="True">
                        <Condition.Binding>
                            <Binding RelativeSource="{RelativeSource Self}"
                              Path="(xcdg:DataGridControl.DataGridContext).GroupLevelDescriptions.Count">
                                <Binding.Converter>
                                    <xcdg:GreaterThanZeroConverter />
                                </Binding.Converter>
                            </Binding>
                        </Condition.Binding>
                    </Condition>

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}"
                          Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="indentationDecorator"
                    Property="Margin"
                    Value="{Binding Path=SplitterWidth, Converter={StaticResource thicknessConverter}, ConverterParameter=Left, ElementName=PART_CellsHost}"/>
            </MultiDataTrigger>

            <!-- This trigger ensures that if the FixedColumnCount is 0 and we there are details, the PART_CellsHost gets indented so the FixedColumnSplitter gets in the margin
              ( in the region where the Toggle button would be)-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, RelativeSource={RelativeSource Self}}"
                          Value="0" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).ShowFixedColumnSplitter, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="indentationDecorator"
                    Property="Margin"
                    Value="{Binding Path=SplitterWidth, Converter={StaticResource thicknessConverter}, ConverterParameter=Left, ElementName=PART_CellsHost}"/>
            </MultiDataTrigger>

            <!-- When there are details, display the Toggle button for the expansion, collapsing of the details -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).HasDetails, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                    <Condition Binding="{Binding Path=(xcdg:DataGridControl.DataGridContext).AllowDetailToggle, RelativeSource={RelativeSource Self}}"
                          Value="True" />

                </MultiDataTrigger.Conditions>

                <Setter TargetName="detailsToggle"
                    Property="Visibility"
                    Value="Hidden" />

            </MultiDataTrigger>

        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!--**************************
    * TEMPLATE: GroupByItem
    ************************** -->
    <ControlTemplate x:Key="aeroNormalColorGroupByItemFlowTemplate"
                    TargetType="xcdg:GroupByItem">

        <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

            <Grid>
                <Border x:Name="border1"
                    BorderBrush="#1AFFFFFF"
                    CornerRadius="2"
                    BorderThickness="1"/>

                <Border x:Name="border2"
                    BorderBrush="#80022841"
                    CornerRadius="2"
                    BorderThickness="1"
                    Margin="1"/>

                <Border x:Name="border3"
                    BorderBrush="#34FFFFFF"
                    CornerRadius="2"
                    BorderThickness="1"
                    Margin="2"/>

                <Border x:Name="bottomGradient"
                    Margin="2">

                    <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                    <StackPanel Orientation="Horizontal"
                           Margin="{TemplateBinding Padding}">

                        <ContentPresenter Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        <ContentPresenter x:Name="sortGlyphPresenter"
                                    Margin="6,0,0,0"
                                    Content="{x:Null}"
                                    ContentTemplate="{StaticResource groupByItemDescendingSortFlowGlyph}"
                                    Visibility="Hidden" />

                    </StackPanel>

                </Border>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver"
                  Value="True">

                <Setter TargetName="border1"
                    Property="BorderBrush"
                    Value="#4DFFFFFF"/>

                <Setter TargetName="border2"
                    Property="BorderBrush"
                    Value="#52022841"/>

                <Setter TargetName="border3"
                    Property="BorderBrush"
                    Value="#71FFFFFF"/>
            </Trigger>

            <Trigger Property="IsPressed"
                  Value="True">
            </Trigger>

            <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

                <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible"/>

            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

                <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{StaticResource groupByItemDescendingSortFlowGlyph}"/>

                <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible"/>

            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>


    <!--**************************
    * TEMPLATE: GroupHeaderControl
    ************************** -->
        <conv:IntAdditionConverter x:Key="groupHeaderControlGroupLevelConverter" />
        <ControlTemplate x:Key="tableflowViewGroupHeaderControlTemplate"
                    TargetType="xcdg:GroupHeaderControl">

            <!-- Using this decorator will prevent the GroupHeaderControl of exceeding the width 
           defined by the grid's column. -->
            <views:PassiveLayoutDecorator Axis="Horizontal">
                <!-- This DockPanel is used to layout the GroupLevelIndicatorPane placeholder and the GroupHeaderControl Content. -->
                <DockPanel>

                    <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
              whenever this GroupHeaderControl is part of a group. -->
                    <xcdg:HierarchicalGroupLevelIndicatorPane DockPanel.Dock="Left" />
                    <xcdg:GroupLevelIndicatorPane DockPanel.Dock="Left"
                                           Indented="False"
                                           xcdg:GroupLevelIndicatorPane.GroupLevel="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(xcdg:GroupLevelIndicatorPane.GroupLevel), Converter={StaticResource groupHeaderControlGroupLevelConverter}, ConverterParameter=-1}" />
                    <!-- Main Border for the GroupHeaderControl. It is Focusable to make the InputBindings work. -->
                    <Border x:Name="mainBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    Focusable="True"
                    FocusVisualStyle="{TemplateBinding FocusVisualStyle}">

                        <!-- Define all the standard InputBindings for a GroupHeaderControl. -->
                        <Border.InputBindings>
                            <KeyBinding Command="{x:Static xcdg:DataGridCommands.ToggleGroupExpansion}"
                              Key="Space" />

                            <KeyBinding Command="{x:Static xcdg:DataGridCommands.ExpandGroup}"
                              Key="Right" />

                            <KeyBinding Command="{x:Static xcdg:DataGridCommands.ExpandGroup}"
                              Key="Add" />

                            <KeyBinding Command="{x:Static xcdg:DataGridCommands.CollapseGroup}"
                              Key="Left" />

                            <KeyBinding Command="{x:Static xcdg:DataGridCommands.CollapseGroup}"
                              Key="Subtract" />

                            <MouseBinding Command="{x:Static xcdg:DataGridCommands.ToggleGroupExpansion}"
                                MouseAction="LeftDoubleClick" />

                        </Border.InputBindings>

                        <DockPanel>

                            <!-- ToggleButton that is used to expand/collapse the group. -->
                                <ToggleButton DockPanel.Dock="Left"
                                OverridesDefaultStyle="True"
                                Template="{StaticResource groupExpanderToggleButtonTemplate}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Group.IsExpanded}" />

                                <!-- ContentPresenter in charge of displaying this GroupHeaderControl's Content, which is
                    a Group by default. -->
                                <ContentPresenter DockPanel.Dock="Left"
                                    Margin="3,0,0,0"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                                <!-- Blue line that is traced across the GroupHeader, following the content -->
                                <Rectangle Fill="#B0BFDE"
                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                             HorizontalAlignment="Stretch"
                             Height="1"
                             Margin="7,0,0,0" />
                        </DockPanel>
                    </Border>
                </DockPanel>
            </views:PassiveLayoutDecorator>

            <ControlTemplate.Triggers>
                <Trigger Property="xcdg:DataGridControl.NavigationBehavior"
                  Value="None">
                    <Setter TargetName="mainBorder"
                    Property="Focusable"
                    Value="False" />
                </Trigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>

        <!--**************************
    * TEMPLATE: GroupHeaderControl (When top level sticky)
    ************************** -->
        <ControlTemplate x:Key="tableflowViewGroupHeaderTopLevelStickyControlTemplate"
                    TargetType="xcdg:GroupHeaderControl">

            <!-- Using this decorator will prevent the GroupHeaderControl of exceeding the width 
           defined by the grid's column. -->
            <views:PassiveLayoutDecorator Axis="Horizontal">
                <!-- This DockPanel is used to layout the GroupLevelIndicatorPane placeholder and the GroupHeaderControl Content. -->
                <DockPanel>

                    <!-- GroupLevelIndicatorPane is a placeholder for individual GroupLevelIndicator elements that are added
              whenever this GroupHeaderControl is part of a group. -->
                    <xcdg:HierarchicalGroupLevelIndicatorPane DockPanel.Dock="Left" />
                    <xcdg:GroupLevelIndicatorPane DockPanel.Dock="Left"
                                           Indented="False"
                                           xcdg:GroupLevelIndicatorPane.GroupLevel="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(xcdg:GroupLevelIndicatorPane.GroupLevel), Converter={StaticResource groupHeaderControlGroupLevelConverter}, ConverterParameter=-1}" />

                    <Grid>
                        <Border x:Name="outerBorder"
                       BorderBrush="#FF03395B"
                       BorderThickness="0,1,0,1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.5*" />
                                    <RowDefinition Height="0.5*" />
                                </Grid.RowDefinitions>
                                <Border Grid.RowSpan="2">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,0.5"
                                                StartPoint="1,0.5">
                                            <GradientStop Color="#FF196C77"
                                            Offset="0" />
                                            
                                            <GradientStop Color="#FF065F99"
                                            Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>
                                <Border Opacity="0.2"
                             Grid.RowSpan="2">
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0.5,0.5"
                                                StartPoint="0.5,0">
                                            <GradientStop Color="#CCFFFFFF"
                                            Offset="1" />
                                            <GradientStop Color="#4CFFFFFF"
                                            Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>
                            </Grid>
                        </Border>

                        <!-- Main Border for the GroupHeaderControl. It is Focusable to make the InputBindings work. -->
                        <Border x:Name="mainBorder"
                       Background="Transparent"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       Padding="{TemplateBinding Padding}"
                       Focusable="True"
                       FocusVisualStyle="{TemplateBinding FocusVisualStyle}">

                            <!-- Define all the standard InputBindings for a GroupHeaderControl. -->
                            <Border.InputBindings>
                                <KeyBinding Command="{x:Static xcdg:DataGridCommands.ToggleGroupExpansion}"
                                 Key="Space" />

                                <KeyBinding Command="{x:Static xcdg:DataGridCommands.ExpandGroup}"
                                 Key="Right" />

                                <KeyBinding Command="{x:Static xcdg:DataGridCommands.ExpandGroup}"
                                 Key="Add" />

                                <KeyBinding Command="{x:Static xcdg:DataGridCommands.CollapseGroup}"
                                 Key="Left" />

                                <KeyBinding Command="{x:Static xcdg:DataGridCommands.CollapseGroup}"
                                 Key="Subtract" />

                                <MouseBinding Command="{x:Static xcdg:DataGridCommands.ToggleGroupExpansion}"
                                   MouseAction="LeftDoubleClick" />

                            </Border.InputBindings>

                            <DockPanel>

                                <!-- ToggleButton that is used to expand/collapse the group. -->
                                <ToggleButton DockPanel.Dock="Left"
                                   OverridesDefaultStyle="True"
                                   Template="{StaticResource groupExpanderToggleButtonTemplate}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Focusable="False"
                                   IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Group.IsExpanded}" />

                                <!-- ContentPresenter in charge of displaying this GroupHeaderControl's Content, which is
                    a Group by default. -->
                                <ContentPresenter DockPanel.Dock="Left"
                                       Margin="3,0,0,0"
                                       TextElement.Foreground="{TemplateBinding Foreground}"
                                       Content="{TemplateBinding Content}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </DockPanel>
                        </Border>
                    </Grid>
                </DockPanel>
            </views:PassiveLayoutDecorator>

            <ControlTemplate.Triggers>
                <Trigger Property="xcdg:DataGridControl.NavigationBehavior"
                  Value="None">
                    <Setter TargetName="mainBorder"
                    Property="Focusable"
                    Value="False" />
                </Trigger>
                </ControlTemplate.Triggers>

        </ControlTemplate>

        <!--**************************
    * TEMPLATE: FixedColumnSplitter
    ************************** -->
        <ControlTemplate x:Key="columnManagerRowFixedColumnSplitterTemplate"
                    TargetType="views:FixedColumnSplitter">
            <Grid x:Name="SplitterAERO"
            Background="Transparent"
            Width="6"
            Height="20">

                <Border HorizontalAlignment="Left"
                 Margin="0,2,0,2"
                 Width="1"
                 Background="White" />

                <Border Width="1"
                 Background="White"
                 HorizontalAlignment="Right"
                 Margin="0,2,0,2" />

                <Border HorizontalAlignment="Center"
                 Margin="0,6,0,0"
                 VerticalAlignment="Top"
                 Width="2"
                 Height="2"
                 Background="#FF808080" />

                <Border Width="2"
                 Height="2"
                 Background="#FF808080"
                 HorizontalAlignment="Center"
                 VerticalAlignment="Center" />

                <Border Width="2"
                 Height="2"
                 Background="#FF808080"
                 HorizontalAlignment="Center"
                 Margin="0,0,0,6"
                 VerticalAlignment="Bottom" />

                <Border Height="1"
                 Background="#FF808080"
                 Margin="2,3,2,0"
                 VerticalAlignment="Top"
                 Width="2" />

                <Border Height="1"
                 Background="#FF808080"
                 Width="2"
                 Margin="2,0,2,3"
                 VerticalAlignment="Bottom" />

            </Grid>
        </ControlTemplate>

        <!--**************************
    * TEMPLATE: HierarchicalGroupByControl
    ************************** -->

    <HierarchicalDataTemplate x:Key="dataGridContextTemplate"
                             DataType="{x:Type xcdg:DataGridContext}"
                             ItemsSource="{Binding Path=DetailConfigurations}">

        <xcdg:HierarchicalGroupByControlNode x:Name="groupByControlNode"
                                            ItemsSource="{Binding Path=GroupLevelDescriptions}"
                                            Title="{Binding Path=SourceDetailConfiguration.Title}" />


        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=SourceDetailConfiguration}"
                      Value="{x:Null}">
                <Setter TargetName="groupByControlNode"
                    Property="Title" Value="{Binding Path=DataGridControl.ItemsSourceName}"/>
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>

    </HierarchicalDataTemplate>


    <!-- TreeViewItem Style to avoid displaying Expander and avoid selection and click -->
        <Style x:Key="hierarchicalGroupByControlTreeViewItemStyle"
          TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded"
              Value="True" />

        <Setter Property="Focusable"
              Value="False" />

        <Setter Property="Visibility">
            <Setter.Value>
                <PriorityBinding>
                    <Binding Path="."
                        Converter="{StaticResource notDetailConfigConverter}"
                        ConverterParameter="{x:Type xcdg:DetailConfiguration}" />
                    <Binding Path="Visible"
                        Converter="{StaticResource booleanToVisibilityConverter}" />
                </PriorityBinding>

            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid ShowGridLines="False">
                        <Grid.ColumnDefinitions>

                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition MaxHeight="1" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}"
                          Padding="{TemplateBinding Padding}"
                          BorderBrush="{TemplateBinding Border.BorderBrush}"
                          Background="{TemplateBinding Panel.Background}"
                          x:Name="treeViewItemBorder"
                          SnapsToDevicePixels="True"
                          VerticalAlignment="Center"
                          Grid.Column="1"
                          Grid.RowSpan="3">


                            <ContentPresenter Content="{TemplateBinding HeaderedContentControl.Header}"
                                       ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                       ContentSource="Header"
                                       x:Name="PART_Header"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       Margin="2,0,2,0" />
                        </Border>

                        <ItemsPresenter x:Name="ItemsHost"
                                  Grid.Column="1"
                                  Grid.Row="3"
                                  Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                           Value="false">
                            <Setter TargetName="ItemsHost"
                             Property="Visibility"
                             Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="tableflowViewAeroNormalColorHierarchicalGroupByControlTemplate"
                    TargetType="{x:Type xcdg:HierarchicalGroupByControl}">


        <Grid x:Name="rootGrid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />

                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Border x:Name="rootBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 Background="{TemplateBinding Background}"
                 BorderBrush="{Binding Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineBrush, RelativeSource={RelativeSource Self}}"
                 BorderThickness="{Binding Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter=Top, RelativeSource={RelativeSource Self}}"
                 Padding="{TemplateBinding Padding}" />

            <Border x:Name="verticalGridLineBorder"
                 Grid.Column="1"
                 Grid.ColumnSpan="2"
                 BorderBrush="{Binding Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineBrush, RelativeSource={RelativeSource Self}}"
                 BorderThickness="{Binding Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter=Right, RelativeSource={RelativeSource Self}}" />


            <xcdg:HierarchicalGroupLevelIndicatorPane Grid.Column="0" />


            <Border BorderBrush="{TemplateBinding BorderBrush}"
                 BorderThickness="{TemplateBinding BorderThickness}"
                 Grid.Column="2">

                <Grid>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.53*" />
                            <RowDefinition Height="0.27*" />
                            <RowDefinition Height="0.2*" />
                        </Grid.RowDefinitions>

                        <!--<Border Grid.RowSpan="3">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0.5"
                                             EndPoint="1,0.5">
                                    <GradientStop Offset="0"
                                         Color="#FF6280B6" />
                                    <GradientStop Offset="1"
                                         Color="#FF96A7C6" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>

                        <Border Grid.Row="2">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,0"
                                             EndPoint="0.5,1">
                                    <GradientStop Offset="0"
                                         Color="#008CC1C6" />
                                    <GradientStop Offset="0.5"
                                         Color="#0F85BDC2" />
                                    <GradientStop Offset="0.96"
                                         Color="#AE80BBBF" />
                                    <GradientStop Offset="1"
                                         Color="#B280BBBF" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>

                        <Border Grid.Row="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0.5,1"
                                             EndPoint="0.5,0">
                                    <GradientStop Offset="0"
                                         Color="#26FFFFFF" />
                                    <GradientStop Offset="1"
                                         Color="#B1FFFFFF" />
                                    <GradientStop Offset="0.643"
                                         Color="#66FFFFFF" />
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>


                        <Border Grid.RowSpan="3"
                          BorderThickness="1"
                          BorderBrush="#093442">

                            <Border Grid.RowSpan="3"
                             BorderThickness="1"
                             BorderBrush="#7FFFFFFF" />
                        </Border>-->

                    </Grid>

                    <xcdg:HierarchicalGroupLevelIndicatorPane Grid.Column="0" />

                    <xcdg:GroupLevelIndicatorPane x:Name="groupLevelIndicatorPane"
                                        Grid.Column="1" />


                    <xcdg:GroupByControl Grid.Column="2" x:Name="text_field"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               Background="{TemplateBinding Background}"
                               BorderThickness="{TemplateBinding BorderThickness}"                               
                               AllowGroupingModification="{TemplateBinding AllowGroupingModification}"
                               AllowSort="{TemplateBinding AllowSort}"
                               ConnectionLinePen="{TemplateBinding ConnectionLinePen}"
                               NoGroupContent=""
                               Foreground="White"
                               xcdg:TableView.CanScrollHorizontally="True"/>

                    <ItemsPresenter Margin="{TemplateBinding Padding}" />

                </Grid>
            </Border>

        </Grid>

        <ControlTemplate.Triggers>

            <DataTrigger Binding="{Binding Path=(xcdg:GroupLevelIndicatorPane.GroupLevel), RelativeSource={RelativeSource TemplatedParent}}"
                      Value="-1">
                <Setter TargetName="groupLevelIndicatorPane"
                    Property="Visibility"
                    Value="Collapsed" />
                <Setter TargetName="verticalGridLineBorder"
                    Property="BorderThickness"
                    Value="{Binding Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineThickness, Converter={StaticResource thicknessConverter}, ConverterParameter=Right\, Left, RelativeSource={RelativeSource Self}}" />
            </DataTrigger>


        </ControlTemplate.Triggers>


    </ControlTemplate>


    <!--**************************
    * TEMPLATE: HierarchicalGroupByControlNode
    ************************** -->
        <ControlTemplate x:Key="tableflowViewAeroNormalColorHierarchicalGroupByControlNodeTemplate"
                    TargetType="xcdg:HierarchicalGroupByControlNode">

            <StackPanel Orientation="Horizontal"
                  Background="{TemplateBinding Background}"
                  Margin="0,4,0,4">

                <Grid VerticalAlignment="Top"
               HorizontalAlignment="Center"
               Margin="0,0,0,0">

                    <Border x:Name="border1"
                    BorderBrush="#1AFFFFFF"
                    CornerRadius="2"
                    BorderThickness="1">

                        <Border x:Name="border2"
                       BorderBrush="#80022841"
                       CornerRadius="2"
                       BorderThickness="1">

                            <Border x:Name="border3"
                          BorderBrush="#34FFFFFF"
                          CornerRadius="2"
                          BorderThickness="1">

                                <TextBlock x:Name="titleTextBlock"
                                Text="{TemplateBinding Title}"
                                Foreground="White"
                                Margin="3,0,3,0" />
                            </Border>
                            </Border>
                        </Border>
                </Grid>

                <ItemsPresenter Margin="2,0,0,0"
                         VerticalAlignment="Bottom"
                         HorizontalAlignment="Right" />

            </StackPanel>

        </ControlTemplate>

        <!--**************************
    * TEMPLATE: HierarchicalGroupByItem 
    ************************** -->
        <ControlTemplate x:Key="aeroNormalColorHierarchicalGroupByItemTemplate"
                    TargetType="xcdg:HierarchicalGroupByItem">

            <Border BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}">

                <Grid>
                    <Border x:Name="border1"
                    BorderBrush="#1AFFFFFF"
                    CornerRadius="2"
                    BorderThickness="1" />

                    <Border x:Name="border2"
                    BorderBrush="#80022841"
                    CornerRadius="2"
                    BorderThickness="1"
                    Margin="1" />

                    <Border x:Name="border3"
                    BorderBrush="#34FFFFFF"
                    CornerRadius="2"
                    BorderThickness="1"
                    Margin="2" />

                    <Border x:Name="topGradient"
                    Height="17"
                    VerticalAlignment="Top">
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0.5,1"
                                       EndPoint="0.503,0.039">
                                <GradientStop Offset="0"
                                   Color="#00FFFFFF" />
                                <GradientStop Offset="1"
                                   Color="#4CFFFFFF" />
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>

                    <Border x:Name="bottomGradient"
                    Margin="2">
                        <Border.Background>
                            <RadialGradientBrush RadiusX="0.550205"
                                       RadiusY="1.03782"
                                       Center="0.487447,1.21575"
                                       GradientOrigin="0.487447,1.21575">
                                <GradientStop Offset="0"
                                   Color="#99FFFFFF" />
                                <GradientStop Offset="0.17"
                                   Color="#99FFFFFF" />
                                <GradientStop Offset="1"
                                   Color="#00FFFFFF" />

                                <RadialGradientBrush.RelativeTransform>
                                    <RotateTransform CenterX="0.48747"
                                         CenterY="1.21575"
                                         Angle="-90" />
                                </RadialGradientBrush.RelativeTransform>
                            </RadialGradientBrush>
                        </Border.Background>

                        <!-- This StackPanel is used to layout the ContentPresenter and the Sort Glyph (when present). -->
                        <StackPanel Orientation="Horizontal"
                           Margin="{TemplateBinding Padding}"
                           TextElement.Foreground="White">

                            <ContentPresenter Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <ContentPresenter x:Name="sortGlyphPresenter"
                                    Margin="6,0,4,0"
                                    Content="{x:Null}"
                                    ContentTemplate="{StaticResource groupByItemDescendingSortFlowGlyph}"
                                    Visibility="Hidden" />

                        </StackPanel>

                    </Border>
                </Grid>
            </Border>

            <ControlTemplate.Triggers>

                <Trigger Property="IsMouseOver"
                  Value="True">

                    <Setter TargetName="border1"
                    Property="BorderBrush"
                    Value="#4DFFFFFF" />

                    <Setter TargetName="border2"
                    Property="BorderBrush"
                    Value="#52022841" />

                    <Setter TargetName="border3"
                    Property="BorderBrush"
                    Value="#71FFFFFF" />

                    <Setter TargetName="topGradient"
                    Property="Background">

                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0.503,1.013"
                                       EndPoint="0.503,0.039">
                                <GradientStop Offset="0"
                                   Color="#19FFFFFF" />
                                <GradientStop Offset="1"
                                   Color="#99FFFFFF" />
                            </LinearGradientBrush>

                        </Setter.Value>
                    </Setter>

                    <Setter TargetName="bottomGradient"
                    Property="Background">

                        <Setter.Value>
                            <RadialGradientBrush RadiusX="0.550205"
                                       RadiusY="1.03782"
                                       Center="0.487447,1.21575"
                                       GradientOrigin="0.487447,1.21575">
                                <GradientStop Offset="0.0195"
                                   Color="#FFFFFFFF" />
                                <GradientStop Offset="0.169"
                                   Color="#FFFFFFFF" />
                                <GradientStop Offset="1"
                                   Color="#00FFFFFF" />

                                <RadialGradientBrush.RelativeTransform>
                                    <RotateTransform CenterX="0.487447"
                                         CenterY="1.21575"
                                         Angle="-90" />
                                </RadialGradientBrush.RelativeTransform>
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>

                </Trigger>

                <Trigger Property="IsPressed"
                  Value="True">

                    <Setter TargetName="border1"
                    Property="BorderBrush"
                    Value="#4DFFFFFF" />

                    <Setter TargetName="border2"
                    Property="BorderBrush"
                    Value="#AE022841" />

                    <Setter TargetName="border3"
                    Property="BorderBrush">

                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0.542,0.999"
                                       EndPoint="0.542,0.0231">
                                <GradientStop Offset="0"
                                   Color="#0A2F3B" />
                                <GradientStop Offset="0.509"
                                   Color="#0A2F3B" />
                                <GradientStop Offset="0.524"
                                   Color="#4D6B79" />
                                <GradientStop Offset="1"
                                   Color="#4D6B79" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>

                    <Setter TargetName="topGradient"
                    Property="Background">

                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0.503339,1.0131"
                                       EndPoint="0.503339,0.0388058">
                                <GradientStop Offset="0"
                                   Color="#17699EB5" />
                                <GradientStop Offset="1"
                                   Color="#FF5E8799" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>

                    <Setter TargetName="bottomGradient"
                    Property="Background">

                        <Setter.Value>
                            <RadialGradientBrush RadiusX="0.550205"
                                       RadiusY="1.0782"
                                       Center="0.487447,1.21575"
                                       GradientOrigin="0.487447,1.21575">

                                <GradientStop Offset="0.019"
                                   Color="#FF000000" />
                                <GradientStop Offset="0.169"
                                   Color="#FF000000" />
                                <GradientStop Offset="1"
                                   Color="#33000000" />

                                <RadialGradientBrush.RelativeTransform>
                                    <RotateTransform CenterX="0.487447"
                                         CenterY="1.21575"
                                         Angle="-90" />
                                </RadialGradientBrush.RelativeTransform>
                            </RadialGradientBrush>
                        </Setter.Value>
                    </Setter>

                </Trigger>

                <!-- The following 2 triggers allow the appropriate Sort Glyph to be displayed
              depending on the ParentColumn's SortDirection. -->
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Ascending">

                    <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

                </DataTrigger>

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=SortDirection}"
                      Value="Descending">

                    <Setter TargetName="sortGlyphPresenter"
                    Property="ContentPresenter.ContentTemplate"
                    Value="{StaticResource groupByItemDescendingSortFlowGlyph}" />

                    <Setter TargetName="sortGlyphPresenter"
                    Property="Visibility"
                    Value="Visible" />

                </DataTrigger>
                </ControlTemplate.Triggers>

        </ControlTemplate>

        <!-- =================================================================== -->
        <!-- Styles required by some grid elements                               -->
        <!-- =================================================================== -->

        <!--**************************
    * STYLE: baseSplitterStyle
    ************************** -->
        <Style x:Key="baseFixedColumnSplitterStyle"
          TargetType="views:FixedColumnSplitter">

        </Style>

        <!--**************************
    * STYLE: rowSplitterStyle
    ************************** -->
        <Style x:Key="rowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

            <Setter Property="Background"
              Value="#F1F2F4" />

        </Style>


        <!--**************************
    * STYLE: ColumnManagerRowSplitterStyle
    ************************** -->
        <Style x:Key="columnManagerRowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

            <Setter Property="Template"
              Value="{StaticResource columnManagerRowFixedColumnSplitterTemplate}" />

        </Style>

        <!--**************************
    * STYLE: StatRowSplitterStyle
    ************************** -->
        <Style x:Key="statRowSplitterStyle"
          TargetType="views:FixedColumnSplitter"
          BasedOn="{StaticResource baseFixedColumnSplitterStyle}">

            <!-- For aesthetic reasons, the FixedColumnSplitter is not shown in the StatRow. -->
            <Setter Property="Template"
              Value="{x:Null}" />

        </Style>


        <!--**************************
    * STYLE: CellErrorStyle 
    ************************** -->
        <Style x:Key="cellErrorStyle"
          TargetType="xcdg:Cell">

            <Setter Property="Background"
              Value="{StaticResource errorBackgroundBrush}" />

            <Setter Property="Foreground"
              Value="{StaticResource errorForegroundBrush}" />

            <Style.Triggers>
                <Trigger Property="IsValidationErrorRestrictive"
                  Value="True">
                    <Setter Property="Background"
                    Value="{StaticResource errorBackgroundBrush}" />

                </Trigger>

                <Trigger Property="IsValidationErrorRestrictive"
                  Value="False">

                    <Setter Property="Foreground"
                    Value="{StaticResource warningForegroundBrush}" />

                    <Setter Property="Background"
                    Value="{StaticResource warningBackgroundBrush}" />

                </Trigger>
            </Style.Triggers>

        </Style>

        <!-- =================================================================== -->
        <!-- Keyed Styles of grid elements                                       -->
        <!-- =================================================================== -->

        <!--**************************
    * STYLE: DataGridControl 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGridControlStyle"
          TargetType="xcdg:DataGridControl">

            <Setter Property="BorderBrush"
              Value="Black" />

            <Setter Property="BorderThickness"
              Value="1" />

            <Setter Property="Background"
              Value="White" />

            <Setter Property="Foreground"
              Value="Black" />

            <!-- This is required to display gridlines of uniform thickness -->
            <Setter Property="SnapsToDevicePixels"
              Value="True" />

            <!--<Setter Property="CellErrorStyle"
              Value="{StaticResource cellErrorStyle}" />-->

            <Setter Property="Template"
              Value="{StaticResource tableflowViewDataGridControlTemplate}" />

        </Style>

        <!--**************************
    * STYLE: RowSelectorPane
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorRowSelectorPaneStyle"
          TargetType="xcdg:RowSelectorPane">

            <Setter Property="Background"
              Value="{StaticResource verticalHeaderBackgroundBrush}" />

            <Setter Property="TextElement.Foreground"
              Value="{StaticResource headerForegroundBrush}" />
    </Style>

        <!--**************************
    * STYLE: RowSelector 
    ************************** -->
    <xcdg:TypeToBooleanConverter x:Key="insertionRowTypeConverter" />
        <!--<conv:TypeToBooleanConverter x:Key="rowTypeConverter" />-->
        <Style x:Key="tableflowViewAeroNormalColorRowSelectorStyle"
          TargetType="xcdg:RowSelector">

          <!-- Set the RowSelector's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying RowSelectorPane. -->
        <Setter Property="Background"
              Value="Transparent" />

        <Setter Property="BorderBrush"
              Value="{StaticResource rowSelectorBorderBrush}" />

        <Setter Property="BorderThickness"
              Value="1" />

        <Setter Property="HorizontalContentAlignment"
              Value="Center" />

        <Setter Property="VerticalContentAlignment"
              Value="Center" />

        <Setter Property="Padding"
              Value="2" />

        <Setter Property="Template"
              Value="{StaticResource tableflowViewRowSelectorTemplate}" />

        <Style.Triggers>


            <!-- The DataContext of a RowSelector is always set to its corresponding
              Row/item. This is why we use DataTriggers with no explicit Binding Source
              when we want to react to properties of the Row/item. -->

            <!-- When the Row is Current, display the current glyph in the RowSelector (but not when the Row is an InsertionRow. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsCurrent}"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource insertionRowTypeConverter}, ConverterParameter={x:Type xcdg:InsertionRow} }"
                          Value="False" />
                </MultiDataTrigger.Conditions>
            </MultiDataTrigger>

            <!-- When the Row is Current, display the current glyph in the RowSelector (but not when the Row is an InsertionRow. -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasValidationError}"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsBeingEdited}"
                          Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ValidationErrorGlyph}" />
            </MultiDataTrigger>

            <!-- When the Row is being edited, display the appropriate glyph in the RowSelector. -->
            <Trigger Property="IsBeingEdited"
                  Value="True">
                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).EditingRowGlyph}" />

            </Trigger>

            <!-- When the Row has a validation error, display the appropriate glyph in the RowSelector. -->
            <!--<Trigger Property="HasValidationError"
                  Value="True">
                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ValidationErrorGlyph}" />
            </Trigger>-->

            <!-- When the row is an InsertionRow and the row is not being current -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=RowType, Converter={StaticResource insertionRowTypeConverter}, ConverterParameter={x:Type xcdg:InsertionRow} }"
                          Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsBeingEdited}"
                          Value="False" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=HasValidationError}"
                          Value="False" />
                </MultiDataTrigger.Conditions>

                <Setter Property="ContentTemplate"
                    Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).InsertionRowGlyph}" />
            </MultiDataTrigger>
        </Style.Triggers>
            
        </Style>

        <!--**************************
    * STYLE: Row Style
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorRowStyle"
          TargetType="xcdg:Row">

            <Setter Property="FocusVisualStyle"
              Value="{StaticResource tableflowViewRowFocusVisualStyle}" />

            <Setter Property="SelectionBackground"
              Value="{StaticResource selectionInnerRowBackgroundBrush}" />

            <Setter Property="SelectionForeground"
              Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />

            <Setter Property="InactiveSelectionBackground"
              Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

            <Setter Property="InactiveSelectionForeground"
              Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />

            <!-- The Row is responsible for drawing the horizontal gridlines. It draws only its top gridline,
           assuming that the bottom gridline will be drawn by its following row/element -->

            <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Top'}" />

            <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineBrush}" />

            <Setter Property="Background"
              Value="Transparent" />

            <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource rowSplitterStyle}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewRowTemplate}" />

            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(views:ViewBase.IsLastItem)}"
                      Value="True">
                    <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Top, Bottom'}" />
                </DataTrigger>

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.HasExpandedDetails)}"
                      Value="True">
                    <Setter Property="BorderThickness"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Top, Bottom'}" />

                </DataTrigger>

                <!-- Enabled/Disabled Odd datarow style alternation -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled}"
                          Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridVirtualizingPanel.ItemIndex), Converter={x:Static conv:IndexToOddConverter.Singleton}}"
                          Value="True" />
                    </MultiDataTrigger.Conditions>

                    <Setter Property="Background"
                    Value="#F1F2F4" />

                </MultiDataTrigger>
            </Style.Triggers>

        </Style>

        <!--**************************
    * STYLE: DataRow 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorDataRowStyle"
          TargetType="xcdg:DataRow"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowStyle}">
        </Style>

    <!--**************************
    * STYLE: InsertionRow 
    ************************** -->
    <Style x:Key="tableflowViewAeroNormalColorInsertionRowStyle"
          TargetType="xcdg:InsertionRow"
          BasedOn="{StaticResource tableflowViewAeroNormalColorDataRowStyle}">
        <Setter Property="Template" Value="{StaticResource tableflowViewInsertionRowTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsCurrent"
                  Value="True">

                <Setter Property="Background"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=SelectionBackground}" />
                <Setter Property="Foreground"
                    Value="{Binding RelativeSource={RelativeSource Self},Path=SelectionForeground}" />

            </Trigger>

            <Trigger Property="xcdg:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
                <!-- We don't want to display the Group Margins for the InsertionRow. -->
                <Setter Property="xcdg:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
            </Trigger>

        </Style.Triggers>

    </Style>

    <!--**************************
    * STYLE: ColumnManagerRow 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorColumnManagerRowStyle"
          TargetType="xcdg:ColumnManagerRow"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowStyle}">

            <!-- Use a different background and foreground than the base Row style. -->
            <Setter Property="Background"
              Value="{StaticResource horizontalHeaderBackgroundBrush}" />

            <Setter Property="Foreground"
              Value="{StaticResource headerForegroundBrush}" />

            <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource columnManagerRowSplitterStyle}" />

            <!-- We don't want to display a RowSelector for the ColumnManagerRow. -->
            <Setter Property="xcdg:RowSelector.Visible"
              Value="False" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewColumnManagerRowTemplate}" />

            <Style.Triggers>
                <Trigger Property="xcdg:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
                    <!-- We don't want to display the Group Margins for the ColumnManagerRow. -->
                    <Setter Property="xcdg:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
                </Trigger>

                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AllowColumnChooser}"
                      Value="True">
                    <Setter Property="ContextMenu"
                    Value="{StaticResource columnManagerRowContextMenu}" />
                </DataTrigger>
            </Style.Triggers>

        </Style>

        <!--**************************
    * STYLE: StatRow 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorStatRowStyle"
          TargetType="xcdg:StatRow"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowStyle}">

            <Setter Property="views:TableView.FixedColumnSplitterStyle"
              Value="{StaticResource statRowSplitterStyle}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewStatRowTemplate}" />

            <Style.Triggers>
                <Trigger Property="xcdg:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
                    <!-- When the StatRow is not inside a group, we don't want to display the Group Margins. -->
                    <Setter Property="xcdg:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
                </Trigger>
            </Style.Triggers>

        </Style>

        <!--**************************
    * STYLE: FilterRow 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorFilterRowStyle"
          TargetType="xcdg:FilterRow"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowStyle}">
            <Style.Triggers>
                <Trigger Property="xcdg:GroupLevelIndicatorPane.GroupLevel"
                  Value="-1">
                    <!-- We don't want to display the Group Margins for the FilterRow. -->
                    <Setter Property="xcdg:GroupLevelIndicatorPane.ShowIndicators"
                    Value="False" />
                </Trigger>
            </Style.Triggers>
        </Style>


        <!--**************************
    * STYLE: Cell
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorCellStyle"
          TargetType="xcdg:Cell">

        <Setter Property="CurrentBackground"
              Value="{StaticResource {x:Static SystemColors.WindowBrushKey}}" />

            <Setter Property="CurrentForeground"
              Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />

            <Setter Property="SelectionBackground"
              Value="{StaticResource selectionInnerRowBackgroundBrush}" />

            <Setter Property="SelectionForeground"
              Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />

            <Setter Property="InactiveSelectionBackground"
              Value="{StaticResource inactiveSelectionInnerRowBackgroundBrush}" />

            <Setter Property="InactiveSelectionForeground"
              Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />

            <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
            <Setter Property="Background"
              Value="Transparent" />

            <!-- In TableflowView, each Cell has the same width as its ParentColum's ActualWidth -->
            <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

            <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

            <!-- The Cell is responsible for drawing the vertical gridlines. It draws only its right gridline, 
           assuming that the left gridline will have been drawn by its preceding cell -->

            <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

            <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewCellTemplate}" />

        </Style>

        <!--**************************
    * STYLE: DataCell
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorDataCellStyle"
          TargetType="xcdg:DataCell"
          BasedOn="{StaticResource tableflowViewAeroNormalColorCellStyle}" />

        <!--**************************
    * STYLE: InsertionCell
   ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorInsertionCellStyle"
          TargetType="xcdg:InsertionCell"
          BasedOn="{StaticResource tableflowViewAeroNormalColorDataCellStyle}" />

        <!--**************************
    * STYLE: ColumnManagerCell 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorColumnManagerCellStyle"
          TargetType="xcdg:ColumnManagerCell">

            <Setter Property="BorderBrush"
              Value="{StaticResource columnManagerCellBorderBrush}" />

            <Setter Property="BorderThickness"
              Value="1" />

            <!-- In TableflowView, each Cell has the same width as its ParentColum's ActualWidth -->
            <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

            <Setter Property="Padding"
              Value="{StaticResource columnManagerFlowCellPadding}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewColumnManagerCellTemplate}" />

        </Style>

        <!--**************************
    * STYLE: StatCell
   ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorStatCellStyle"
          TargetType="xcdg:StatCell">

            <!-- Set the Cell's background to Transparent to make it hit-testable
           while preserving the background drawn by the underlying Row. -->
            <Setter Property="Background"
              Value="Transparent" />

            <!-- In TableflowView, each Cell has the same widt has its ParentColum's ActualWidth -->
            <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

            <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

            <!-- To prevent difference in size between StatCells and DataCells-->
            <Setter Property="BorderBrush"
              Value="Transparent" />

            <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewStatCellTemplate}" />

        </Style>

        <!--**************************
    * STYLE: FilterCell
   ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorFilterCellStyle"
          TargetType="xcdg:FilterCell">
            <Style.Resources>
                <Style TargetType="Button">
                    <Setter Property="Background"
                    Value="#FF84868E" />
                </Style>
            </Style.Resources>
            <!-- In TableflowView, each Cell has the same width as its ParentColum's ActualWidth -->
            <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self},Path=ParentColumn.ActualWidth}" />

            <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

            <!-- The Cell is responsible for drawing the vertical gridlines. It draws only its right gridline, 
           assuming that the left gridline will have been drawn by its preceding cell -->

            <Setter Property="BorderThickness"
              Value="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineThickness,Converter={StaticResource thicknessConverter},ConverterParameter='Right'}" />

            <Setter Property="BorderBrush"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).VerticalGridLineBrush}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewFilterCellTemplate}" />
            <Style.Triggers>
                <Trigger Property="ContentTemplate"
                  Value="{x:Null}">
                    <Setter Property="Background">
                        <Setter.Value>
                            <VisualBrush Visual="{StaticResource patternFilteringDisabled}"
                               TileMode="Tile"
                               Stretch="None"
                               Viewport="0,0,30,59"
                               ViewportUnits="Absolute" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--**************************
    * STYLE: GroupByControl 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupByControlStyle"
          TargetType="xcdg:GroupByControl">

            <Setter Property="Foreground"
              Value="{StaticResource groupByControlForegroundBrush}" />

            <!-- If we don't specify a MinHeight, the default "size-to-content" behavior will arrange 
           the control with a Height of 0, which makes it invisible and unusable.
           In a typical TableflowView, a height of at least 25 is appropriate for the GroupByControl. -->
            <Setter Property="MinHeight"
              Value="20" />

            <Setter Property="Padding"
              Value="8" />

            <Setter Property="xcdg:RowSelector.Visible"
              Value="False" />

            <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

            <Setter Property="Template"
              Value="{StaticResource aeroNormalColorGroupByControlFlowTemplate}" />

        </Style>

    <!--**************************
    * STYLE: GroupByItem
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupByItemStyle"
         TargetType="xcdg:GroupByItem">

            <Setter Property="Padding"
              Value="{StaticResource columnManagerFlowCellPadding}" />

            <Setter Property="Template"
              Value="{StaticResource aeroNormalColorGroupByItemFlowTemplate}" />

        </Style>

        <!--**************************
    * STYLE: GroupHeaderControl 
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupHeaderControlStyle"
          TargetType="xcdg:GroupHeaderControl">

            <!-- Set the GroupHeaderControl's background to Transparent to make it hit-testable. -->
            <Setter Property="Background"
              Value="Transparent" />

            <Setter Property="Padding"
              Value="{StaticResource cellPadding}" />

            <Setter Property="VerticalContentAlignment"
              Value="Center" />

            <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

            <!-- The GroupHeaderControl itself must not be focusable. The main Border inside its Template will
           be made Focusable because it holds the various InputBindings that make the
           GroupHeaderControl work. -->
            <Setter Property="Focusable"
              Value="False" />


            <Setter Property="Template"
              Value="{StaticResource tableflowViewGroupHeaderControlTemplate}" />

            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content.IsBottomLevel}"
                          Value="False" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Content.Level}"
                          Value="0" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AreGroupHeadersSticky}"
                          Value="True" />
                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).AreGroupsFlattened}"
                          Value="True" />
                    </MultiDataTrigger.Conditions>

                    <Setter Property="Template"
                    Value="{StaticResource tableflowViewGroupHeaderTopLevelStickyControlTemplate}" />

                    <Setter Property="Foreground"
                    Value="White" />
                </MultiDataTrigger>
            </Style.Triggers>

        </Style>


        <!--**************************
    * STYLE: GroupLevelIndicator
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupLevelIndicatorStyle"
          TargetType="xcdg:GroupLevelIndicator">

            <Setter Property="Width"
              Value="0" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewGroupLevelIndicatorTemplate}" />

        </Style>

        <!--**************************
    * STYLE: DetailIndicator
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorDetailIndicatorStyle"
          TargetType="xcdg:DetailIndicator">

            <Setter Property="Background"
              Value="{x:Null}" />

            <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DetailIndicatorWidth}" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewDetailIndicatorTemplate}" />

        </Style>

        <!--**************************
    * STYLE: GroupLevelIndicatorPane
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupLevelIndicatorPaneStyle"
          TargetType="xcdg:GroupLevelIndicatorPane">

            <Setter Property="Template"
              Value="{StaticResource tableflowViewGroupLevelIndicatorPaneTemplate}" />

            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsLeaf"
                          Value="False" />
                        <Condition Property="views:ViewBase.IsLastItem"
                          Value="True" />
                        </MultiTrigger.Conditions>

                        <Setter Property="Margin"
                    Value="0,0,0,-5" />
                </MultiTrigger>

            </Style.Triggers>
        </Style>

        <!--**************************
    * STYLE: HierarchicalGroupLevelIndicatorPane
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorHierarchicalGroupLevelIndicatorPaneStyle"
          TargetType="xcdg:HierarchicalGroupLevelIndicatorPane">

            <Setter Property="Template"
              Value="{StaticResource tableflowViewHierarchicalGroupLevelIndicatorPaneTemplate}" />
        </Style>

        <!--**************************
    * STYLE: HierarchicalGroupByControlNode
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorHierarchicalGroupByControlNodeStyle"
          TargetType="xcdg:HierarchicalGroupByControlNode">

            <Setter Property="StairHeight"
              Value="0" />

            <Setter Property="ConnectionLineOffset"
              Value="0" />

            <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewAeroNormalColorHierarchicalGroupByControlNodeTemplate}" />

        </Style>

        <!--**************************
    * STYLE: HierarchicalGroupByControl
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorHierarchicalGroupByControlStyle"
          TargetType="xcdg:HierarchicalGroupByControl">

            <!-- The Background property must be set for DragManager to work properly -->
            <Setter Property="Background"
              Value="Transparent" />

            <Setter Property="Foreground"
              Value="White" />

            <Setter Property="Focusable"
              Value="False" />

            <Setter Property="StairHeight"
              Value="0" />

            <Setter Property="ConnectionLineOffset"
              Value="0" />

            <Setter Property="ConnectionLineAlignment"
              Value="CenterToCenter" />

            <Setter Property="ConnectionLinePen"
              Value="{StaticResource groupByConnectionLinePen}" />

            <Setter Property="xcdg:RowSelector.Visible"
              Value="False" />

            <Setter Property="views:TableView.CanScrollHorizontally"
              Value="False" />

            <Setter Property="Template"
              Value="{StaticResource tableflowViewAeroNormalColorHierarchicalGroupByControlTemplate}" />

            <Style.Triggers>

                <!-- We use the old GroupByControl Template if there are no Details in the DataGridControl.ItemsSource -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HasDetails}"
                          Value="False" />

                        <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ParentDataGridContext, Converter={StaticResource nullToBooleanConverter}}"
                          Value="True" />

                    </MultiDataTrigger.Conditions>

                    <Setter Property="Template"
                    Value="{StaticResource tableflowViewCommonHierarchicalGroupByControlOldGroupByControlTemplate}" />

                </MultiDataTrigger>

            </Style.Triggers>

        </Style>

        <!--**************************
    * STYLE: HierarchicalGroupByItem
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorHierarchicalGroupByItemStyle"
          TargetType="xcdg:HierarchicalGroupByItem">

            <!--The Background property must be set for DragManager to work properly-->
            <Setter Property="Background"
              Value="Transparent" />

            <Setter Property="Padding"
             Value="{StaticResource columnManagerFlowCellPadding}" />

                <Setter Property="Margin"
              Value="4,0,4,0" />

                <Setter Property="Template"
              Value="{StaticResource aeroNormalColorHierarchicalGroupByItemTemplate}" />

        </Style>

        <!--**************************
    * STYLE: GroupNavigationControl
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupNavigationControlStyle"
          TargetType="xcdg:GroupNavigationControl">
            <Setter Property="Template"
              Value="{StaticResource tableflowViewGroupNavigationControlTemplate}" />
        </Style>

        <!--**************************
    * STYLE: GroupNavigationControlItem
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupNavigationControlItemStyle"
          TargetType="{x:Type xcdg:GroupNavigationControlItem}">

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xcdg:GroupNavigationControlItem}">
                        <Grid SnapsToDevicePixels="true">
                            <Border x:Name="Border"
                          Background="Transparent" />
                            <Border Margin="2">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>

                            <!-- Change IsSelected SelectedBackgroundBrush to set the selection color for the items -->
                            <Trigger Property="IsMouseOver"
                           Value="true">
                                <Setter Property="Background"
                             TargetName="Border"
                             Value="{StaticResource {x:Static SystemColors.HighlightBrushKey}}" />

                                <Setter Property="Foreground"
                             Value="Black" />
                            </Trigger>

                            <Trigger Property="IsEnabled"
                           Value="false">
                                <Setter Property="Foreground"
                             Value="Gray" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--**************************
    * STYLE: GroupNavigationButton
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorGroupNavigationButtonStyle"
          TargetType="xcdg:GroupNavigationButton">
            <Setter Property="Template"
              Value="{StaticResource tableflowViewGroupNavigationButtonTemplate}" />
        </Style>

        <!--**************************
    * STYLE: AutoFilterControl
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorAutoFilterControlStyle"
          TargetType="xcdg:AutoFilterControl">

            <Setter Property="Template"
              Value="{StaticResource tableflowViewAutoFilterControlTemplate}" />
            <Setter Property="DistinctValueItemContainerStyle"
              Value="{StaticResource defaultAutoFilteringCheckBoxItemStyle}" />
        </Style>

        <!--**************************
    * STYLE: MenuItem (for the ColumnChooserContextMenu)
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorColumnChooserContextMenuMenuItemStyle"
          TargetType="{x:Type MenuItem}">
            <Setter Property="IsCheckable"
              Value="True" />
            <Setter Property="IsChecked"
              Value="{Binding Path=Visible}" />
            <Setter Property="StaysOpenOnClick"
              Value="True" />
        </Style>

        <!--**************************
    * STYLE: ColumnChooserContextMenu
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorColumnChooserContextMenuStyle"
          TargetType="{x:Type xcdg:ColumnChooserContextMenu}"
          BasedOn="{StaticResource {x:Type ContextMenu}}">
            <Setter Property="ItemContainerStyle"
              Value="{StaticResource tableflowViewAeroNormalColorColumnChooserContextMenuMenuItemStyle}" />
            <Setter Property="DisplayMemberPath"
              Value="Title" />
            <Setter Property="SortOrder"
              Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ColumnChooserSortOrder}" />
        </Style>

        <!--**************************
    * STYLE: ScrollTip
    ************************** -->
        <Style x:Key="tableflowViewAeroNormalColorScrollTipStyle"
          TargetType="xcdg:ScrollTip">

            <Setter Property="Template"
              Value="{StaticResource scrollTipTemplate}" />

            <Setter Property="Background">
                <Setter.Value>
                    <LinearGradientBrush StartPoint="0.5,1"
                                 EndPoint="0.5,0">
                        <GradientStop Color="#FFA9DAF6"
                             Offset="0" />

                        <GradientStop Color="#FFD9F0FC"
                             Offset="0.5" />

                        <GradientStop Color="#FFE8F5FD"
                             Offset="1" />
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>

            <Setter Property="BorderBrush"
              Value="#FF3C7FB1" />

            <Setter Property="TextElement.Foreground"
              Value="Black" />

            <Setter Property="VerticalAlignment"
              Value="Center" />

            <Setter Property="HorizontalAlignment"
              Value="Right" />

        </Style>

        <!-- =================================================================== -->
        <!-- Default values for the View                                         -->
        <!-- =================================================================== -->

        <Style x:Key="tableflowViewAeroNormalColorDefaultValues"
          TargetType="views:TableflowView">

            <Setter Property="GroupLevelIndicatorWidth"
              Value="100" />

            <Setter Property="DetailIndicatorWidth"
              Value="0" />

            <!--<Setter Property="DefaultDropMarkPen"
              Value="{StaticResource dropMarkPen}" />-->

            <Setter Property="VerticalGridLineBrush"
              Value="{StaticResource hotRowBorderBrush}" />

            <Setter Property="VerticalGridLineThickness"
              Value="0" />

            <Setter Property="HorizontalGridLineBrush"
              Value="{StaticResource hotRowBorderBrush}" />

            <Setter Property="HorizontalGridLineThickness"
              Value="0" />

            <Setter Property="AutoFilterDropDownGlyph"
              Value="{StaticResource autoFilterDropDownGlyph}" />

            <Setter Property="AutoFilterGlyph"
              Value="{StaticResource autoFilterGlyph}" />

            <!-- Those glyphs are null by default on ViewBase, so every Theme should define
           and set their own custom glyphs. -->

            <Setter Property="AscendingSortGlyph"
              Value="{StaticResource ascendingSortGlyph}" />

            <Setter Property="DescendingSortGlyph"
              Value="{StaticResource descendingSortGlyph}" />

            <Setter Property="ExpandGroupGlyph"
              Value="{StaticResource expandGroupGlyph}" />

            <Setter Property="CollapseGroupGlyph"
              Value="{StaticResource collapseGroupGlyph}" />

            <!--<Setter Property="CurrentItemGlyph"
              Value="{StaticResource currentItemGlyph}" />-->

            <Setter Property="EditingRowGlyph"
              Value="{StaticResource editingRowGlyph}" />

            <Setter Property="ValidationErrorGlyph"
              Value="{StaticResource validationErrorGlyph}" />

            <Setter Property="InsertionRowGlyph"
              Value="{StaticResource insertionRowGlyph}" />

            <!--<Setter Property="FilterRowGlyph"
              Value="{StaticResource filterRowGlyph}" />-->

            <!--<Setter Property="ClearFilterButtonGlyph"
              Value="{StaticResource clearFilterButtonGlyph}" />-->

            <!--<Setter Property="ConnectionStateLoadingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

            <Setter Property="ConnectionStateCommittingGlyph"
              Value="{StaticResource connectionStateLoadingGlyph}" />

            <Setter Property="ConnectionStateErrorGlyph"
              Value="{StaticResource connectionStateErrorGlyph}" />-->
        </Style>


        <!-- =================================================================== -->
        <!-- DefaultStyleKey declarations                                        -->
        <!-- =================================================================== -->

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}}"
          TargetType="{x:Type xcdg:TableflowView}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorDefaultValues}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:DataGridControl}"
          TargetType="{x:Type xcdg:DataGridControl}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGridControlStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:RowSelectorPane}"
          TargetType="{x:Type xcdg:RowSelectorPane}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowSelectorPaneStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:RowSelector}"
          TargetType="{x:Type xcdg:RowSelector}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowSelectorStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:Row}"
           TargetType="{x:Type xcdg:Row}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorRowStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:DataRow}"
          TargetType="{x:Type xcdg:DataRow}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorDataRowStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:InsertionRow}"
          TargetType="{x:Type xcdg:InsertionRow}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorInsertionRowStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:ColumnManagerRow}"
          TargetType="{x:Type xcdg:ColumnManagerRow}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorColumnManagerRowStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:StatRow}"
          TargetType="{x:Type xcdg:StatRow}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorStatRowStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:FilterRow}"
         TargetType="{x:Type xcdg:StatRow}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorFilterRowStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:Cell}"
          TargetType="{x:Type xcdg:Cell}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorCellStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:DataCell}"
          TargetType="{x:Type xcdg:DataCell}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorDataCellStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:InsertionCell}"
          TargetType="{x:Type xcdg:InsertionCell}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorInsertionCellStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:ColumnManagerCell}"
          TargetType="{x:Type xcdg:ColumnManagerCell}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorColumnManagerCellStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:StatCell}"
          TargetType="{x:Type xcdg:StatCell}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorStatCellStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:FilterCell}"
          TargetType="xcdg:FilterCell"
          BasedOn="{StaticResource tableflowViewAeroNormalColorFilterCellStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupByControl}"
          TargetType="{x:Type xcdg:GroupByControl}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupByControlStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupByItem}"
          TargetType="{x:Type xcdg:GroupByItem}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupByItemStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupHeaderControl}"
          TargetType="{x:Type xcdg:GroupHeaderControl}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupHeaderControlStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupLevelIndicator}"
          TargetType="{x:Type xcdg:GroupLevelIndicator}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupLevelIndicatorStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:DetailIndicator}"
          TargetType="{x:Type xcdg:DetailIndicator}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorDetailIndicatorStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupLevelIndicatorPane}"
          TargetType="{x:Type xcdg:GroupLevelIndicatorPane}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupLevelIndicatorPaneStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:HierarchicalGroupLevelIndicatorPane}"
          TargetType="{x:Type xcdg:HierarchicalGroupLevelIndicatorPane}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorHierarchicalGroupLevelIndicatorPaneStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:AutoFilterControl}"
          TargetType="{x:Type xcdg:AutoFilterControl}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorAutoFilterControlStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:ScrollTip}"
          TargetType="{x:Type xcdg:ScrollTip}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorScrollTipStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:HierarchicalGroupByControl}"
          TargetType="{x:Type xcdg:HierarchicalGroupByControl}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorHierarchicalGroupByControlStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:HierarchicalGroupByControlNode}"
          TargetType="{x:Type xcdg:HierarchicalGroupByControlNode}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorHierarchicalGroupByControlNodeStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:HierarchicalGroupByItem}"
          TargetType="{x:Type xcdg:HierarchicalGroupByItem}"
          BasedOn="{StaticResource tableflowViewAeroNormalColorHierarchicalGroupByItemStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:ColumnChooserContextMenu}"
          TargetType="xcdg:ColumnChooserContextMenu"
          BasedOn="{StaticResource tableflowViewAeroNormalColorColumnChooserContextMenuStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupNavigationButton}"
          TargetType="xcdg:GroupNavigationButton"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupNavigationButtonStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupNavigationControl}"
          TargetType="xcdg:GroupNavigationControl"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupNavigationControlStyle}" />

        <Style x:Key="{markup:ThemeKey TargetViewType=views:TableflowView, ThemeType={x:Type local:ArcLogisticsCustomTheme}, TargetElementType=xcdg:GroupNavigationControlItem}"
          TargetType="xcdg:GroupNavigationControlItem"
          BasedOn="{StaticResource tableflowViewAeroNormalColorGroupNavigationControlItemStyle}" />
    
</ResourceDictionary>
