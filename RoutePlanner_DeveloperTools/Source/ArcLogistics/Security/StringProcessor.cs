using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using ESRI.ArcLogistics.Utility;

namespace ESRI.ArcLogistics.Utility
{
    /// <summary>
    /// Provides encryption/decryption functionality.
    /// </summary>
    internal static class StringProcessor
    {
        #region public methods
        ///////////////////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////////////////

        /// <summary>
        /// Encrypts string with autogenerated password value.
        /// </summary>
        public static string TransformData(string data)
        {
            // TODO: insert your own encryption here, for example:
            //
            // var newData = CDataProcessingAPI.TransformData(Encoding.UTF8.GetBytes(data));

            var newData = Encoding.UTF8.GetBytes(data);

            return Convert.ToBase64String(newData);
        }

        /// <summary>
        /// Decrypts string with autogenerated password value.
        /// </summary>
        public static string TransformDataBack(string data)
        {
            // TODO: insert your own decryption here, for example:
            //
            // var newData = CDataProcessingAPI.TransformDataBackward(Convert.FromBase64String(data));

            var newData = Convert.FromBase64String(data);

            return Encoding.UTF8.GetString(newData);
        }

        /// <summary>
        /// Attempts decrypting the specified data.
        /// </summary>
        /// <param name="data">The data to be decrypted.</param>
        /// <param name="transformedData">Will contain decrypted data upon success.</param>
        /// <returns>True if and only if the decryption of the specified data succeeded.</returns>
        public static bool TryTransformDataBack(string data, out string transformedData)
        {
            var succeeded = false;
            transformedData = default(string);
            try
            {
                transformedData = StringProcessor.TransformDataBack(data);
                succeeded = true;
            }
            catch (Exception e)
            {
                Logger.Warning(e);
            }

            return succeeded;
        }

        #endregion public methods
    }
}
